/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayToolsApiModelsAuthRequestModel;
import com.konfigthis.client.model.PayToolsApiModelsCaptureVoidRequestModel;
import com.konfigthis.client.model.PayToolsApiModelsCardInputModel;
import com.konfigthis.client.model.PayToolsApiModelsPayerDetails;
import com.konfigthis.client.model.PayToolsApiModelsPaymentGatewayAccount;
import com.konfigthis.client.model.PayToolsApiModelsPaymentGatewayDescriptionModel;
import com.konfigthis.client.model.PayToolsApiModelsRefundRequestModel;
import com.konfigthis.client.model.PaymentsNetworkTokenSchemes;
import com.konfigthis.client.model.PaymentsOperationResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaymentGatewayApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentGatewayApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentGatewayApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listGatewaysCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PaymentGateway";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGatewaysValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listGatewaysCall(_callback);

    }


    private ApiResponse<List<PayToolsApiModelsPaymentGatewayDescriptionModel>> listGatewaysWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listGatewaysValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PayToolsApiModelsPaymentGatewayDescriptionModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGatewaysAsync(final ApiCallback<List<PayToolsApiModelsPaymentGatewayDescriptionModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGatewaysValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PayToolsApiModelsPaymentGatewayDescriptionModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGatewaysRequestBuilder {

        private ListGatewaysRequestBuilder() {
        }

        /**
         * Build call for listGateways
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGatewaysCall(_callback);
        }


        /**
         * Execute listGateways request
         * @return List&lt;PayToolsApiModelsPaymentGatewayDescriptionModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public List<PayToolsApiModelsPaymentGatewayDescriptionModel> execute() throws ApiException {
            ApiResponse<List<PayToolsApiModelsPaymentGatewayDescriptionModel>> localVarResp = listGatewaysWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGateways request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PayToolsApiModelsPaymentGatewayDescriptionModel&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PayToolsApiModelsPaymentGatewayDescriptionModel>> executeWithHttpInfo() throws ApiException {
            return listGatewaysWithHttpInfo();
        }

        /**
         * Execute listGateways request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PayToolsApiModelsPaymentGatewayDescriptionModel>> _callback) throws ApiException {
            return listGatewaysAsync(_callback);
        }
    }

    /**
     * List all payment gateways
     * To provide you with full payment orchestration capabilities, we have integrated with many different payment gateways and processors around the world. This method allows you to retrieve the list of all integrated payment gateways in our system and provide you with the relevant connection settings required for each of them.  To see a graphical list of the supported payment gateways, please visit our website.  If you would like us to support a new payment gateway not on the list, please contact our support.
     * @return ListGatewaysRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public ListGatewaysRequestBuilder listGateways() throws IllegalArgumentException {
        return new ListGatewaysRequestBuilder();
    }
    private okhttp3.Call performAuthorizeOperationCall(PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsApiModelsAuthRequestModel;

        // create path and map variables
        String localVarPath = "/PaymentGateway/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performAuthorizeOperationValidateBeforeCall(PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payToolsApiModelsAuthRequestModel' is set
        if (payToolsApiModelsAuthRequestModel == null) {
            throw new ApiException("Missing the required parameter 'payToolsApiModelsAuthRequestModel' when calling performAuthorizeOperation(Async)");
        }

        return performAuthorizeOperationCall(payToolsApiModelsAuthRequestModel, _callback);

    }


    private ApiResponse<PaymentsOperationResult> performAuthorizeOperationWithHttpInfo(PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel) throws ApiException {
        okhttp3.Call localVarCall = performAuthorizeOperationValidateBeforeCall(payToolsApiModelsAuthRequestModel, null);
        Type localVarReturnType = new TypeToken<PaymentsOperationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call performAuthorizeOperationAsync(PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel, final ApiCallback<PaymentsOperationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = performAuthorizeOperationValidateBeforeCall(payToolsApiModelsAuthRequestModel, _callback);
        Type localVarReturnType = new TypeToken<PaymentsOperationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PerformAuthorizeOperationRequestBuilder {
        private final String currency;
        private final PayToolsApiModelsCardInputModel card;
        private final Double amount;
        private Boolean isDigital;
        private String orderDesc;
        private PayToolsApiModelsPayerDetails payerDetails;
        private String myRef;
        private String paymentGatewayAccountName;
        private String certificateName;
        private PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount;
        private PaymentsNetworkTokenSchemes networkTokenBrand;

        private PerformAuthorizeOperationRequestBuilder(String currency, PayToolsApiModelsCardInputModel card, Double amount) {
            this.currency = currency;
            this.card = card;
            this.amount = amount;
        }

        /**
         * Set isDigital
         * @param isDigital This field is an additional optional parameter used by some of our payment processors. Please read our additional guidance section for payment processors that use this and other parameters (optional)
         * @return PerformAuthorizeOperationRequestBuilder
         */
        public PerformAuthorizeOperationRequestBuilder isDigital(Boolean isDigital) {
            this.isDigital = isDigital;
            return this;
        }
        
        /**
         * Set orderDesc
         * @param orderDesc This field is an additional optional parameter used by some of our payment processors. Please read our additional guidance section for payment processors that use this and other parameters (optional)
         * @return PerformAuthorizeOperationRequestBuilder
         */
        public PerformAuthorizeOperationRequestBuilder orderDesc(String orderDesc) {
            this.orderDesc = orderDesc;
            return this;
        }
        
        /**
         * Set payerDetails
         * @param payerDetails  (optional)
         * @return PerformAuthorizeOperationRequestBuilder
         */
        public PerformAuthorizeOperationRequestBuilder payerDetails(PayToolsApiModelsPayerDetails payerDetails) {
            this.payerDetails = payerDetails;
            return this;
        }
        
        /**
         * Set myRef
         * @param myRef Your custom reference for this transaction (optional)
         * @return PerformAuthorizeOperationRequestBuilder
         */
        public PerformAuthorizeOperationRequestBuilder myRef(String myRef) {
            this.myRef = myRef;
            return this;
        }
        
        /**
         * Set paymentGatewayAccountName
         * @param paymentGatewayAccountName The reference name provided to the stored Payment Gateway Account as set in &#x60;PUT /PaymentGatewayAccounts/{name}&#x60;.  **Please note**, if you provide us with both this parameter and the raw credentials in the &#x60;paymentGatewayAccount&#x60; object, this parameter will be ignored and the raw credentials will take precedence. (optional)
         * @return PerformAuthorizeOperationRequestBuilder
         */
        public PerformAuthorizeOperationRequestBuilder paymentGatewayAccountName(String paymentGatewayAccountName) {
            this.paymentGatewayAccountName = paymentGatewayAccountName;
            return this;
        }
        
        /**
         * Set certificateName
         * @param certificateName Optional parameter if the payment gateway requires authentication using a client certificate. The name of the certificate that was stored in our system via our &lt;a href&#x3D;\\\&quot;https://portal.epaytools.com\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;users portal&lt;/a&gt; (optional)
         * @return PerformAuthorizeOperationRequestBuilder
         */
        public PerformAuthorizeOperationRequestBuilder certificateName(String certificateName) {
            this.certificateName = certificateName;
            return this;
        }
        
        /**
         * Set paymentGatewayAccount
         * @param paymentGatewayAccount  (optional)
         * @return PerformAuthorizeOperationRequestBuilder
         */
        public PerformAuthorizeOperationRequestBuilder paymentGatewayAccount(PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount) {
            this.paymentGatewayAccount = paymentGatewayAccount;
            return this;
        }
        
        /**
         * Set networkTokenBrand
         * @param networkTokenBrand  (optional)
         * @return PerformAuthorizeOperationRequestBuilder
         */
        public PerformAuthorizeOperationRequestBuilder networkTokenBrand(PaymentsNetworkTokenSchemes networkTokenBrand) {
            this.networkTokenBrand = networkTokenBrand;
            return this;
        }
        
        /**
         * Build call for performAuthorizeOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel = buildBodyParams();
            return performAuthorizeOperationCall(payToolsApiModelsAuthRequestModel, _callback);
        }

        private PayToolsApiModelsAuthRequestModel buildBodyParams() {
            PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel = new PayToolsApiModelsAuthRequestModel();
            payToolsApiModelsAuthRequestModel.currency(this.currency);
            payToolsApiModelsAuthRequestModel.isDigital(this.isDigital);
            payToolsApiModelsAuthRequestModel.orderDesc(this.orderDesc);
            payToolsApiModelsAuthRequestModel.payerDetails(this.payerDetails);
            payToolsApiModelsAuthRequestModel.card(this.card);
            payToolsApiModelsAuthRequestModel.amount(this.amount);
            payToolsApiModelsAuthRequestModel.myRef(this.myRef);
            payToolsApiModelsAuthRequestModel.paymentGatewayAccountName(this.paymentGatewayAccountName);
            payToolsApiModelsAuthRequestModel.certificateName(this.certificateName);
            payToolsApiModelsAuthRequestModel.paymentGatewayAccount(this.paymentGatewayAccount);
            payToolsApiModelsAuthRequestModel.networkTokenBrand(this.networkTokenBrand);
            return payToolsApiModelsAuthRequestModel;
        }

        /**
         * Execute performAuthorizeOperation request
         * @return PaymentsOperationResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public PaymentsOperationResult execute() throws ApiException {
            PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel = buildBodyParams();
            ApiResponse<PaymentsOperationResult> localVarResp = performAuthorizeOperationWithHttpInfo(payToolsApiModelsAuthRequestModel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute performAuthorizeOperation request with HTTP info returned
         * @return ApiResponse&lt;PaymentsOperationResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentsOperationResult> executeWithHttpInfo() throws ApiException {
            PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel = buildBodyParams();
            return performAuthorizeOperationWithHttpInfo(payToolsApiModelsAuthRequestModel);
        }

        /**
         * Execute performAuthorizeOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentsOperationResult> _callback) throws ApiException {
            PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel = buildBodyParams();
            return performAuthorizeOperationAsync(payToolsApiModelsAuthRequestModel, _callback);
        }
    }

    /**
     * Perform a payment gateway authorize operation
     * This method allows you to perform an \&quot;authorize\&quot; operation (also called \&quot;preauthorization\&quot; or \&quot;authorization\&quot;) through your payment gateway. When you perform the \&quot;authorize\&quot; operation, the bank that issued the credit card will place an authorization of the total amount of the funds. This is how the bank determines if the funds are available to make the purchase. The card will not actually be “charged” until you perform the \&quot;capture\&quot; operation (using our &#x60;[PUT] /PaymentGateway/capture&#x60; method).  **Please note**, different card brands and different banks allow for different time frames on the lifespan of a payment authorization. You will need to check with your payment processor on how long you would have between performing an \&quot;authorize\&quot; operation and a \&quot;charge\&quot; operation\&quot;.  If needed, you can void this \&quot;authorize\&quot; operation by using the &#x60;[DELETE] /PaymentGateway/void&#x60; method
     * @param payToolsApiModelsAuthRequestModel Card charge model (required)
     * @return PerformAuthorizeOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
     </table>
     */
    public PerformAuthorizeOperationRequestBuilder performAuthorizeOperation(String currency, PayToolsApiModelsCardInputModel card, Double amount) throws IllegalArgumentException {
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            if (currency != null && currency.length() < 1) {
              throw new IllegalArgumentException("Invalid value for currency. Length must be greater than or equal to 1.");
            }

        if (card == null) throw new IllegalArgumentException("\"card\" is required but got null");
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        return new PerformAuthorizeOperationRequestBuilder(currency, card, amount);
    }
    private okhttp3.Call performCaptureOperationCall(PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsApiModelsCaptureVoidRequestModel;

        // create path and map variables
        String localVarPath = "/PaymentGateway/capture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performCaptureOperationValidateBeforeCall(PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payToolsApiModelsCaptureVoidRequestModel' is set
        if (payToolsApiModelsCaptureVoidRequestModel == null) {
            throw new ApiException("Missing the required parameter 'payToolsApiModelsCaptureVoidRequestModel' when calling performCaptureOperation(Async)");
        }

        return performCaptureOperationCall(payToolsApiModelsCaptureVoidRequestModel, _callback);

    }


    private ApiResponse<PaymentsOperationResult> performCaptureOperationWithHttpInfo(PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel) throws ApiException {
        okhttp3.Call localVarCall = performCaptureOperationValidateBeforeCall(payToolsApiModelsCaptureVoidRequestModel, null);
        Type localVarReturnType = new TypeToken<PaymentsOperationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call performCaptureOperationAsync(PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel, final ApiCallback<PaymentsOperationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = performCaptureOperationValidateBeforeCall(payToolsApiModelsCaptureVoidRequestModel, _callback);
        Type localVarReturnType = new TypeToken<PaymentsOperationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PerformCaptureOperationRequestBuilder {
        private final String currency;
        private final String refTransId;
        private final PayToolsApiModelsCardInputModel card;
        private final Double amount;
        private String myRef;
        private String paymentGatewayAccountName;
        private String certificateName;
        private PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount;
        private PaymentsNetworkTokenSchemes networkTokenBrand;

        private PerformCaptureOperationRequestBuilder(String currency, String refTransId, PayToolsApiModelsCardInputModel card, Double amount) {
            this.currency = currency;
            this.refTransId = refTransId;
            this.card = card;
            this.amount = amount;
        }

        /**
         * Set myRef
         * @param myRef Your custom reference for this transaction (optional)
         * @return PerformCaptureOperationRequestBuilder
         */
        public PerformCaptureOperationRequestBuilder myRef(String myRef) {
            this.myRef = myRef;
            return this;
        }
        
        /**
         * Set paymentGatewayAccountName
         * @param paymentGatewayAccountName The reference name provided to the stored Payment Gateway Account as set in &#x60;PUT /PaymentGatewayAccounts/{name}&#x60;.  **Please note**, if you provide us with both this parameter and the raw credentials in the &#x60;paymentGatewayAccount&#x60; object, this parameter will be ignored and the raw credentials will take precedence. (optional)
         * @return PerformCaptureOperationRequestBuilder
         */
        public PerformCaptureOperationRequestBuilder paymentGatewayAccountName(String paymentGatewayAccountName) {
            this.paymentGatewayAccountName = paymentGatewayAccountName;
            return this;
        }
        
        /**
         * Set certificateName
         * @param certificateName Optional parameter if the payment gateway requires authentication using a client certificate. The name of the certificate that was stored in our system via our &lt;a href&#x3D;\\\&quot;https://portal.epaytools.com\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;users portal&lt;/a&gt; (optional)
         * @return PerformCaptureOperationRequestBuilder
         */
        public PerformCaptureOperationRequestBuilder certificateName(String certificateName) {
            this.certificateName = certificateName;
            return this;
        }
        
        /**
         * Set paymentGatewayAccount
         * @param paymentGatewayAccount  (optional)
         * @return PerformCaptureOperationRequestBuilder
         */
        public PerformCaptureOperationRequestBuilder paymentGatewayAccount(PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount) {
            this.paymentGatewayAccount = paymentGatewayAccount;
            return this;
        }
        
        /**
         * Set networkTokenBrand
         * @param networkTokenBrand  (optional)
         * @return PerformCaptureOperationRequestBuilder
         */
        public PerformCaptureOperationRequestBuilder networkTokenBrand(PaymentsNetworkTokenSchemes networkTokenBrand) {
            this.networkTokenBrand = networkTokenBrand;
            return this;
        }
        
        /**
         * Build call for performCaptureOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel = buildBodyParams();
            return performCaptureOperationCall(payToolsApiModelsCaptureVoidRequestModel, _callback);
        }

        private PayToolsApiModelsCaptureVoidRequestModel buildBodyParams() {
            PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel = new PayToolsApiModelsCaptureVoidRequestModel();
            payToolsApiModelsCaptureVoidRequestModel.currency(this.currency);
            payToolsApiModelsCaptureVoidRequestModel.refTransId(this.refTransId);
            payToolsApiModelsCaptureVoidRequestModel.card(this.card);
            payToolsApiModelsCaptureVoidRequestModel.amount(this.amount);
            payToolsApiModelsCaptureVoidRequestModel.myRef(this.myRef);
            payToolsApiModelsCaptureVoidRequestModel.paymentGatewayAccountName(this.paymentGatewayAccountName);
            payToolsApiModelsCaptureVoidRequestModel.certificateName(this.certificateName);
            payToolsApiModelsCaptureVoidRequestModel.paymentGatewayAccount(this.paymentGatewayAccount);
            payToolsApiModelsCaptureVoidRequestModel.networkTokenBrand(this.networkTokenBrand);
            return payToolsApiModelsCaptureVoidRequestModel;
        }

        /**
         * Execute performCaptureOperation request
         * @return PaymentsOperationResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public PaymentsOperationResult execute() throws ApiException {
            PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel = buildBodyParams();
            ApiResponse<PaymentsOperationResult> localVarResp = performCaptureOperationWithHttpInfo(payToolsApiModelsCaptureVoidRequestModel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute performCaptureOperation request with HTTP info returned
         * @return ApiResponse&lt;PaymentsOperationResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentsOperationResult> executeWithHttpInfo() throws ApiException {
            PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel = buildBodyParams();
            return performCaptureOperationWithHttpInfo(payToolsApiModelsCaptureVoidRequestModel);
        }

        /**
         * Execute performCaptureOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentsOperationResult> _callback) throws ApiException {
            PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel = buildBodyParams();
            return performCaptureOperationAsync(payToolsApiModelsCaptureVoidRequestModel, _callback);
        }
    }

    /**
     * Perform a payment gateway capture operation
     * This method allows you to perform a \&quot;capture\&quot; operation on a previously created \&quot;authorize\&quot; operation (see our &#x60;[POST] /PaymentGateway/authorize&#x60; method for additional information).  When you perform the \&quot;authorize\&quot; operation, the bank that issued the credit card will place an authorization of the total amount of the funds. This is how the bank determines if the funds are available to make the purchase. The card will not actually be “charged” until you perform the \&quot;capture\&quot; operation.  **Please note**, different card brands and different banks allow for different time frames on the lifespan of a payment authorization. You will need to check with your payment processor on how long you would have between performing an \&quot;authorize\&quot; operation and a \&quot;charge\&quot; operation\&quot;.
     * @param payToolsApiModelsCaptureVoidRequestModel Capture or Void Request Model (required)
     * @return PerformCaptureOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
     </table>
     */
    public PerformCaptureOperationRequestBuilder performCaptureOperation(String currency, String refTransId, PayToolsApiModelsCardInputModel card, Double amount) throws IllegalArgumentException {
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            if (currency != null && currency.length() < 1) {
              throw new IllegalArgumentException("Invalid value for currency. Length must be greater than or equal to 1.");
            }

        if (refTransId == null) throw new IllegalArgumentException("\"refTransId\" is required but got null");
            if (refTransId != null && refTransId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for refTransId. Length must be greater than or equal to 1.");
            }

        if (card == null) throw new IllegalArgumentException("\"card\" is required but got null");
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        return new PerformCaptureOperationRequestBuilder(currency, refTransId, card, amount);
    }
    private okhttp3.Call performChargeOperationCall(PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsApiModelsAuthRequestModel;

        // create path and map variables
        String localVarPath = "/PaymentGateway/charge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performChargeOperationValidateBeforeCall(PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payToolsApiModelsAuthRequestModel' is set
        if (payToolsApiModelsAuthRequestModel == null) {
            throw new ApiException("Missing the required parameter 'payToolsApiModelsAuthRequestModel' when calling performChargeOperation(Async)");
        }

        return performChargeOperationCall(payToolsApiModelsAuthRequestModel, _callback);

    }


    private ApiResponse<PaymentsOperationResult> performChargeOperationWithHttpInfo(PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel) throws ApiException {
        okhttp3.Call localVarCall = performChargeOperationValidateBeforeCall(payToolsApiModelsAuthRequestModel, null);
        Type localVarReturnType = new TypeToken<PaymentsOperationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call performChargeOperationAsync(PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel, final ApiCallback<PaymentsOperationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = performChargeOperationValidateBeforeCall(payToolsApiModelsAuthRequestModel, _callback);
        Type localVarReturnType = new TypeToken<PaymentsOperationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PerformChargeOperationRequestBuilder {
        private final String currency;
        private final PayToolsApiModelsCardInputModel card;
        private final Double amount;
        private Boolean isDigital;
        private String orderDesc;
        private PayToolsApiModelsPayerDetails payerDetails;
        private String myRef;
        private String paymentGatewayAccountName;
        private String certificateName;
        private PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount;
        private PaymentsNetworkTokenSchemes networkTokenBrand;

        private PerformChargeOperationRequestBuilder(String currency, PayToolsApiModelsCardInputModel card, Double amount) {
            this.currency = currency;
            this.card = card;
            this.amount = amount;
        }

        /**
         * Set isDigital
         * @param isDigital This field is an additional optional parameter used by some of our payment processors. Please read our additional guidance section for payment processors that use this and other parameters (optional)
         * @return PerformChargeOperationRequestBuilder
         */
        public PerformChargeOperationRequestBuilder isDigital(Boolean isDigital) {
            this.isDigital = isDigital;
            return this;
        }
        
        /**
         * Set orderDesc
         * @param orderDesc This field is an additional optional parameter used by some of our payment processors. Please read our additional guidance section for payment processors that use this and other parameters (optional)
         * @return PerformChargeOperationRequestBuilder
         */
        public PerformChargeOperationRequestBuilder orderDesc(String orderDesc) {
            this.orderDesc = orderDesc;
            return this;
        }
        
        /**
         * Set payerDetails
         * @param payerDetails  (optional)
         * @return PerformChargeOperationRequestBuilder
         */
        public PerformChargeOperationRequestBuilder payerDetails(PayToolsApiModelsPayerDetails payerDetails) {
            this.payerDetails = payerDetails;
            return this;
        }
        
        /**
         * Set myRef
         * @param myRef Your custom reference for this transaction (optional)
         * @return PerformChargeOperationRequestBuilder
         */
        public PerformChargeOperationRequestBuilder myRef(String myRef) {
            this.myRef = myRef;
            return this;
        }
        
        /**
         * Set paymentGatewayAccountName
         * @param paymentGatewayAccountName The reference name provided to the stored Payment Gateway Account as set in &#x60;PUT /PaymentGatewayAccounts/{name}&#x60;.  **Please note**, if you provide us with both this parameter and the raw credentials in the &#x60;paymentGatewayAccount&#x60; object, this parameter will be ignored and the raw credentials will take precedence. (optional)
         * @return PerformChargeOperationRequestBuilder
         */
        public PerformChargeOperationRequestBuilder paymentGatewayAccountName(String paymentGatewayAccountName) {
            this.paymentGatewayAccountName = paymentGatewayAccountName;
            return this;
        }
        
        /**
         * Set certificateName
         * @param certificateName Optional parameter if the payment gateway requires authentication using a client certificate. The name of the certificate that was stored in our system via our &lt;a href&#x3D;\\\&quot;https://portal.epaytools.com\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;users portal&lt;/a&gt; (optional)
         * @return PerformChargeOperationRequestBuilder
         */
        public PerformChargeOperationRequestBuilder certificateName(String certificateName) {
            this.certificateName = certificateName;
            return this;
        }
        
        /**
         * Set paymentGatewayAccount
         * @param paymentGatewayAccount  (optional)
         * @return PerformChargeOperationRequestBuilder
         */
        public PerformChargeOperationRequestBuilder paymentGatewayAccount(PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount) {
            this.paymentGatewayAccount = paymentGatewayAccount;
            return this;
        }
        
        /**
         * Set networkTokenBrand
         * @param networkTokenBrand  (optional)
         * @return PerformChargeOperationRequestBuilder
         */
        public PerformChargeOperationRequestBuilder networkTokenBrand(PaymentsNetworkTokenSchemes networkTokenBrand) {
            this.networkTokenBrand = networkTokenBrand;
            return this;
        }
        
        /**
         * Build call for performChargeOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel = buildBodyParams();
            return performChargeOperationCall(payToolsApiModelsAuthRequestModel, _callback);
        }

        private PayToolsApiModelsAuthRequestModel buildBodyParams() {
            PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel = new PayToolsApiModelsAuthRequestModel();
            payToolsApiModelsAuthRequestModel.currency(this.currency);
            payToolsApiModelsAuthRequestModel.isDigital(this.isDigital);
            payToolsApiModelsAuthRequestModel.orderDesc(this.orderDesc);
            payToolsApiModelsAuthRequestModel.payerDetails(this.payerDetails);
            payToolsApiModelsAuthRequestModel.card(this.card);
            payToolsApiModelsAuthRequestModel.amount(this.amount);
            payToolsApiModelsAuthRequestModel.myRef(this.myRef);
            payToolsApiModelsAuthRequestModel.paymentGatewayAccountName(this.paymentGatewayAccountName);
            payToolsApiModelsAuthRequestModel.certificateName(this.certificateName);
            payToolsApiModelsAuthRequestModel.paymentGatewayAccount(this.paymentGatewayAccount);
            payToolsApiModelsAuthRequestModel.networkTokenBrand(this.networkTokenBrand);
            return payToolsApiModelsAuthRequestModel;
        }

        /**
         * Execute performChargeOperation request
         * @return PaymentsOperationResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public PaymentsOperationResult execute() throws ApiException {
            PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel = buildBodyParams();
            ApiResponse<PaymentsOperationResult> localVarResp = performChargeOperationWithHttpInfo(payToolsApiModelsAuthRequestModel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute performChargeOperation request with HTTP info returned
         * @return ApiResponse&lt;PaymentsOperationResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentsOperationResult> executeWithHttpInfo() throws ApiException {
            PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel = buildBodyParams();
            return performChargeOperationWithHttpInfo(payToolsApiModelsAuthRequestModel);
        }

        /**
         * Execute performChargeOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentsOperationResult> _callback) throws ApiException {
            PayToolsApiModelsAuthRequestModel payToolsApiModelsAuthRequestModel = buildBodyParams();
            return performChargeOperationAsync(payToolsApiModelsAuthRequestModel, _callback);
        }
    }

    /**
     * Perform a payment gateway charge operation
     * This method allows you to perform a \&quot;charge\&quot; operation through your payment gateway. A \&quot;charge\&quot; operation will request immediate payment from the card and the card owner will see this listed as a transaction in their card statement.  If needed, you can void this \&quot;charge\&quot; operation by using the &#x60;[DELETE] /PaymentGateway/void&#x60; method.
     * @param payToolsApiModelsAuthRequestModel Card charge model (required)
     * @return PerformChargeOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
     </table>
     */
    public PerformChargeOperationRequestBuilder performChargeOperation(String currency, PayToolsApiModelsCardInputModel card, Double amount) throws IllegalArgumentException {
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            if (currency != null && currency.length() < 1) {
              throw new IllegalArgumentException("Invalid value for currency. Length must be greater than or equal to 1.");
            }

        if (card == null) throw new IllegalArgumentException("\"card\" is required but got null");
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        return new PerformChargeOperationRequestBuilder(currency, card, amount);
    }
    private okhttp3.Call performRefundOperationCall(PayToolsApiModelsRefundRequestModel payToolsApiModelsRefundRequestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsApiModelsRefundRequestModel;

        // create path and map variables
        String localVarPath = "/PaymentGateway/refund";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performRefundOperationValidateBeforeCall(PayToolsApiModelsRefundRequestModel payToolsApiModelsRefundRequestModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payToolsApiModelsRefundRequestModel' is set
        if (payToolsApiModelsRefundRequestModel == null) {
            throw new ApiException("Missing the required parameter 'payToolsApiModelsRefundRequestModel' when calling performRefundOperation(Async)");
        }

        return performRefundOperationCall(payToolsApiModelsRefundRequestModel, _callback);

    }


    private ApiResponse<PaymentsOperationResult> performRefundOperationWithHttpInfo(PayToolsApiModelsRefundRequestModel payToolsApiModelsRefundRequestModel) throws ApiException {
        okhttp3.Call localVarCall = performRefundOperationValidateBeforeCall(payToolsApiModelsRefundRequestModel, null);
        Type localVarReturnType = new TypeToken<PaymentsOperationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call performRefundOperationAsync(PayToolsApiModelsRefundRequestModel payToolsApiModelsRefundRequestModel, final ApiCallback<PaymentsOperationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = performRefundOperationValidateBeforeCall(payToolsApiModelsRefundRequestModel, _callback);
        Type localVarReturnType = new TypeToken<PaymentsOperationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PerformRefundOperationRequestBuilder {
        private final String currency;
        private final String refTransId;
        private final PayToolsApiModelsCardInputModel card;
        private final Double amount;
        private PayToolsApiModelsPayerDetails payerDetails;
        private String myRef;
        private String paymentGatewayAccountName;
        private String certificateName;
        private PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount;
        private PaymentsNetworkTokenSchemes networkTokenBrand;

        private PerformRefundOperationRequestBuilder(String currency, String refTransId, PayToolsApiModelsCardInputModel card, Double amount) {
            this.currency = currency;
            this.refTransId = refTransId;
            this.card = card;
            this.amount = amount;
        }

        /**
         * Set payerDetails
         * @param payerDetails  (optional)
         * @return PerformRefundOperationRequestBuilder
         */
        public PerformRefundOperationRequestBuilder payerDetails(PayToolsApiModelsPayerDetails payerDetails) {
            this.payerDetails = payerDetails;
            return this;
        }
        
        /**
         * Set myRef
         * @param myRef Your custom reference for this transaction (optional)
         * @return PerformRefundOperationRequestBuilder
         */
        public PerformRefundOperationRequestBuilder myRef(String myRef) {
            this.myRef = myRef;
            return this;
        }
        
        /**
         * Set paymentGatewayAccountName
         * @param paymentGatewayAccountName The reference name provided to the stored Payment Gateway Account as set in &#x60;PUT /PaymentGatewayAccounts/{name}&#x60;.  **Please note**, if you provide us with both this parameter and the raw credentials in the &#x60;paymentGatewayAccount&#x60; object, this parameter will be ignored and the raw credentials will take precedence. (optional)
         * @return PerformRefundOperationRequestBuilder
         */
        public PerformRefundOperationRequestBuilder paymentGatewayAccountName(String paymentGatewayAccountName) {
            this.paymentGatewayAccountName = paymentGatewayAccountName;
            return this;
        }
        
        /**
         * Set certificateName
         * @param certificateName Optional parameter if the payment gateway requires authentication using a client certificate. The name of the certificate that was stored in our system via our &lt;a href&#x3D;\\\&quot;https://portal.epaytools.com\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;users portal&lt;/a&gt; (optional)
         * @return PerformRefundOperationRequestBuilder
         */
        public PerformRefundOperationRequestBuilder certificateName(String certificateName) {
            this.certificateName = certificateName;
            return this;
        }
        
        /**
         * Set paymentGatewayAccount
         * @param paymentGatewayAccount  (optional)
         * @return PerformRefundOperationRequestBuilder
         */
        public PerformRefundOperationRequestBuilder paymentGatewayAccount(PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount) {
            this.paymentGatewayAccount = paymentGatewayAccount;
            return this;
        }
        
        /**
         * Set networkTokenBrand
         * @param networkTokenBrand  (optional)
         * @return PerformRefundOperationRequestBuilder
         */
        public PerformRefundOperationRequestBuilder networkTokenBrand(PaymentsNetworkTokenSchemes networkTokenBrand) {
            this.networkTokenBrand = networkTokenBrand;
            return this;
        }
        
        /**
         * Build call for performRefundOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsApiModelsRefundRequestModel payToolsApiModelsRefundRequestModel = buildBodyParams();
            return performRefundOperationCall(payToolsApiModelsRefundRequestModel, _callback);
        }

        private PayToolsApiModelsRefundRequestModel buildBodyParams() {
            PayToolsApiModelsRefundRequestModel payToolsApiModelsRefundRequestModel = new PayToolsApiModelsRefundRequestModel();
            payToolsApiModelsRefundRequestModel.currency(this.currency);
            payToolsApiModelsRefundRequestModel.refTransId(this.refTransId);
            payToolsApiModelsRefundRequestModel.payerDetails(this.payerDetails);
            payToolsApiModelsRefundRequestModel.card(this.card);
            payToolsApiModelsRefundRequestModel.amount(this.amount);
            payToolsApiModelsRefundRequestModel.myRef(this.myRef);
            payToolsApiModelsRefundRequestModel.paymentGatewayAccountName(this.paymentGatewayAccountName);
            payToolsApiModelsRefundRequestModel.certificateName(this.certificateName);
            payToolsApiModelsRefundRequestModel.paymentGatewayAccount(this.paymentGatewayAccount);
            payToolsApiModelsRefundRequestModel.networkTokenBrand(this.networkTokenBrand);
            return payToolsApiModelsRefundRequestModel;
        }

        /**
         * Execute performRefundOperation request
         * @return PaymentsOperationResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public PaymentsOperationResult execute() throws ApiException {
            PayToolsApiModelsRefundRequestModel payToolsApiModelsRefundRequestModel = buildBodyParams();
            ApiResponse<PaymentsOperationResult> localVarResp = performRefundOperationWithHttpInfo(payToolsApiModelsRefundRequestModel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute performRefundOperation request with HTTP info returned
         * @return ApiResponse&lt;PaymentsOperationResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentsOperationResult> executeWithHttpInfo() throws ApiException {
            PayToolsApiModelsRefundRequestModel payToolsApiModelsRefundRequestModel = buildBodyParams();
            return performRefundOperationWithHttpInfo(payToolsApiModelsRefundRequestModel);
        }

        /**
         * Execute performRefundOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentsOperationResult> _callback) throws ApiException {
            PayToolsApiModelsRefundRequestModel payToolsApiModelsRefundRequestModel = buildBodyParams();
            return performRefundOperationAsync(payToolsApiModelsRefundRequestModel, _callback);
        }
    }

    /**
     * Perform a payment gateway refund operation
     * This method allows you to submit a \&quot;refund\&quot; operation against a previously created \&quot;charge\&quot; (using &#x60;[POST] /PaymentGateway/charge&#x60;) or \&quot;capture\&quot; (using &#x60;[POST] /PaymentGateway/capture&#x60;) operations.
     * @param payToolsApiModelsRefundRequestModel Capture or Void Request Model (required)
     * @return PerformRefundOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
     </table>
     */
    public PerformRefundOperationRequestBuilder performRefundOperation(String currency, String refTransId, PayToolsApiModelsCardInputModel card, Double amount) throws IllegalArgumentException {
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            if (currency != null && currency.length() < 1) {
              throw new IllegalArgumentException("Invalid value for currency. Length must be greater than or equal to 1.");
            }

        if (refTransId == null) throw new IllegalArgumentException("\"refTransId\" is required but got null");
            if (refTransId != null && refTransId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for refTransId. Length must be greater than or equal to 1.");
            }

        if (card == null) throw new IllegalArgumentException("\"card\" is required but got null");
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        return new PerformRefundOperationRequestBuilder(currency, refTransId, card, amount);
    }
    private okhttp3.Call voidOperationCall(PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsApiModelsCaptureVoidRequestModel;

        // create path and map variables
        String localVarPath = "/PaymentGateway/void";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call voidOperationValidateBeforeCall(PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payToolsApiModelsCaptureVoidRequestModel' is set
        if (payToolsApiModelsCaptureVoidRequestModel == null) {
            throw new ApiException("Missing the required parameter 'payToolsApiModelsCaptureVoidRequestModel' when calling voidOperation(Async)");
        }

        return voidOperationCall(payToolsApiModelsCaptureVoidRequestModel, _callback);

    }


    private ApiResponse<PaymentsOperationResult> voidOperationWithHttpInfo(PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel) throws ApiException {
        okhttp3.Call localVarCall = voidOperationValidateBeforeCall(payToolsApiModelsCaptureVoidRequestModel, null);
        Type localVarReturnType = new TypeToken<PaymentsOperationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call voidOperationAsync(PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel, final ApiCallback<PaymentsOperationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = voidOperationValidateBeforeCall(payToolsApiModelsCaptureVoidRequestModel, _callback);
        Type localVarReturnType = new TypeToken<PaymentsOperationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VoidOperationRequestBuilder {
        private final String currency;
        private final String refTransId;
        private final PayToolsApiModelsCardInputModel card;
        private final Double amount;
        private String myRef;
        private String paymentGatewayAccountName;
        private String certificateName;
        private PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount;
        private PaymentsNetworkTokenSchemes networkTokenBrand;

        private VoidOperationRequestBuilder(String currency, String refTransId, PayToolsApiModelsCardInputModel card, Double amount) {
            this.currency = currency;
            this.refTransId = refTransId;
            this.card = card;
            this.amount = amount;
        }

        /**
         * Set myRef
         * @param myRef Your custom reference for this transaction (optional)
         * @return VoidOperationRequestBuilder
         */
        public VoidOperationRequestBuilder myRef(String myRef) {
            this.myRef = myRef;
            return this;
        }
        
        /**
         * Set paymentGatewayAccountName
         * @param paymentGatewayAccountName The reference name provided to the stored Payment Gateway Account as set in &#x60;PUT /PaymentGatewayAccounts/{name}&#x60;.  **Please note**, if you provide us with both this parameter and the raw credentials in the &#x60;paymentGatewayAccount&#x60; object, this parameter will be ignored and the raw credentials will take precedence. (optional)
         * @return VoidOperationRequestBuilder
         */
        public VoidOperationRequestBuilder paymentGatewayAccountName(String paymentGatewayAccountName) {
            this.paymentGatewayAccountName = paymentGatewayAccountName;
            return this;
        }
        
        /**
         * Set certificateName
         * @param certificateName Optional parameter if the payment gateway requires authentication using a client certificate. The name of the certificate that was stored in our system via our &lt;a href&#x3D;\\\&quot;https://portal.epaytools.com\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;users portal&lt;/a&gt; (optional)
         * @return VoidOperationRequestBuilder
         */
        public VoidOperationRequestBuilder certificateName(String certificateName) {
            this.certificateName = certificateName;
            return this;
        }
        
        /**
         * Set paymentGatewayAccount
         * @param paymentGatewayAccount  (optional)
         * @return VoidOperationRequestBuilder
         */
        public VoidOperationRequestBuilder paymentGatewayAccount(PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount) {
            this.paymentGatewayAccount = paymentGatewayAccount;
            return this;
        }
        
        /**
         * Set networkTokenBrand
         * @param networkTokenBrand  (optional)
         * @return VoidOperationRequestBuilder
         */
        public VoidOperationRequestBuilder networkTokenBrand(PaymentsNetworkTokenSchemes networkTokenBrand) {
            this.networkTokenBrand = networkTokenBrand;
            return this;
        }
        
        /**
         * Build call for voidOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel = buildBodyParams();
            return voidOperationCall(payToolsApiModelsCaptureVoidRequestModel, _callback);
        }

        private PayToolsApiModelsCaptureVoidRequestModel buildBodyParams() {
            PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel = new PayToolsApiModelsCaptureVoidRequestModel();
            payToolsApiModelsCaptureVoidRequestModel.currency(this.currency);
            payToolsApiModelsCaptureVoidRequestModel.refTransId(this.refTransId);
            payToolsApiModelsCaptureVoidRequestModel.card(this.card);
            payToolsApiModelsCaptureVoidRequestModel.amount(this.amount);
            payToolsApiModelsCaptureVoidRequestModel.myRef(this.myRef);
            payToolsApiModelsCaptureVoidRequestModel.paymentGatewayAccountName(this.paymentGatewayAccountName);
            payToolsApiModelsCaptureVoidRequestModel.certificateName(this.certificateName);
            payToolsApiModelsCaptureVoidRequestModel.paymentGatewayAccount(this.paymentGatewayAccount);
            payToolsApiModelsCaptureVoidRequestModel.networkTokenBrand(this.networkTokenBrand);
            return payToolsApiModelsCaptureVoidRequestModel;
        }

        /**
         * Execute voidOperation request
         * @return PaymentsOperationResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public PaymentsOperationResult execute() throws ApiException {
            PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel = buildBodyParams();
            ApiResponse<PaymentsOperationResult> localVarResp = voidOperationWithHttpInfo(payToolsApiModelsCaptureVoidRequestModel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute voidOperation request with HTTP info returned
         * @return ApiResponse&lt;PaymentsOperationResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentsOperationResult> executeWithHttpInfo() throws ApiException {
            PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel = buildBodyParams();
            return voidOperationWithHttpInfo(payToolsApiModelsCaptureVoidRequestModel);
        }

        /**
         * Execute voidOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentsOperationResult> _callback) throws ApiException {
            PayToolsApiModelsCaptureVoidRequestModel payToolsApiModelsCaptureVoidRequestModel = buildBodyParams();
            return voidOperationAsync(payToolsApiModelsCaptureVoidRequestModel, _callback);
        }
    }

    /**
     * Perform a payment gateway Void operation
     * This method allows you to submit a \&quot;void\&quot; operation against a previously created \&quot;charge\&quot; (using &#x60;[POST] /PaymentGateway/charge&#x60;) or \&quot;authorize\&quot; (using &#x60;[POST] /PaymentGateway/authorize&#x60;) operations.
     * @param payToolsApiModelsCaptureVoidRequestModel Capture or Void Request Model (required)
     * @return VoidOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted (for future processing by payment gateway) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict - rejected by payment gateway </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error with payment gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Temporary failure with payment gateway </td><td>  -  </td></tr>
     </table>
     */
    public VoidOperationRequestBuilder voidOperation(String currency, String refTransId, PayToolsApiModelsCardInputModel card, Double amount) throws IllegalArgumentException {
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            if (currency != null && currency.length() < 1) {
              throw new IllegalArgumentException("Invalid value for currency. Length must be greater than or equal to 1.");
            }

        if (refTransId == null) throw new IllegalArgumentException("\"refTransId\" is required but got null");
            if (refTransId != null && refTransId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for refTransId. Length must be greater than or equal to 1.");
            }

        if (card == null) throw new IllegalArgumentException("\"card\" is required but got null");
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        return new VoidOperationRequestBuilder(currency, refTransId, card, amount);
    }
}
