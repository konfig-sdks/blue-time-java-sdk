/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomFormsUploadFormFolderRequest;
import com.konfigthis.client.model.CustomFormsUploadFormFolderRequest1;
import com.konfigthis.client.model.PayToolsApiModelsCustomFormMetaModel;
import com.konfigthis.client.model.PayToolsApiModelsCustomFormUploadModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomFormsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomFormsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomFormsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CustomForms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getListCall(_callback);

    }


    private ApiResponse<PayToolsApiModelsCustomFormMetaModel> getListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsCustomFormMetaModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(final ApiCallback<PayToolsApiModelsCustomFormMetaModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsCustomFormMetaModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {

        private GetListRequestBuilder() {
        }

        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(_callback);
        }


        /**
         * Execute getList request
         * @return PayToolsApiModelsCustomFormMetaModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsCustomFormMetaModel execute() throws ApiException {
            ApiResponse<PayToolsApiModelsCustomFormMetaModel> localVarResp = getListWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsCustomFormMetaModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsCustomFormMetaModel> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo();
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsCustomFormMetaModel> _callback) throws ApiException {
            return getListAsync(_callback);
        }
    }

    /**
     * List Custom Forms
     * This method allows you to retrieve the list of custom forms stored in PCI Booking
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call removeFormCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CustomForms/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFormValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling removeForm(Async)");
        }

        return removeFormCall(name, _callback);

    }


    private ApiResponse<Void> removeFormWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = removeFormValidateBeforeCall(name, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFormAsync(String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFormValidateBeforeCall(name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFormRequestBuilder {
        private final String name;

        private RemoveFormRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for removeForm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFormCall(name, _callback);
        }


        /**
         * Execute removeForm request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFormWithHttpInfo(name);
        }

        /**
         * Execute removeForm request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFormWithHttpInfo(name);
        }

        /**
         * Execute removeForm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFormAsync(name, _callback);
        }
    }

    /**
     * Delete a Custom Forms
     * This method allows you to delete a custom form that was previously stored in PCI Booking.
     * @param name The unique identifier provided to this custom form when originally uploaded (required)
     * @return RemoveFormRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFormRequestBuilder removeForm(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new RemoveFormRequestBuilder(name);
    }
    private okhttp3.Call uploadFormFolderCall(String name, CustomFormsUploadFormFolderRequest1 customFormsUploadFormFolderRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFormsUploadFormFolderRequest1;

        // create path and map variables
        String localVarPath = "/CustomForms/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFormFolderValidateBeforeCall(String name, CustomFormsUploadFormFolderRequest1 customFormsUploadFormFolderRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling uploadFormFolder(Async)");
        }

        return uploadFormFolderCall(name, customFormsUploadFormFolderRequest1, _callback);

    }


    private ApiResponse<PayToolsApiModelsCustomFormUploadModel> uploadFormFolderWithHttpInfo(String name, CustomFormsUploadFormFolderRequest1 customFormsUploadFormFolderRequest1) throws ApiException {
        okhttp3.Call localVarCall = uploadFormFolderValidateBeforeCall(name, customFormsUploadFormFolderRequest1, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsCustomFormUploadModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadFormFolderAsync(String name, CustomFormsUploadFormFolderRequest1 customFormsUploadFormFolderRequest1, final ApiCallback<PayToolsApiModelsCustomFormUploadModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFormFolderValidateBeforeCall(name, customFormsUploadFormFolderRequest1, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsCustomFormUploadModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadFormFolderRequestBuilder {
        private final String name;
        private String contentType;
        private String contentDisposition;
        private Map<String, List<String>> headers;
        private Long length;
        private String name;
        private String fileName;

        private UploadFormFolderRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set contentType
         * @param contentType  (optional)
         * @return UploadFormFolderRequestBuilder
         */
        public UploadFormFolderRequestBuilder contentType(String contentType) {
            this.contentType = contentType;
            return this;
        }
        
        /**
         * Set contentDisposition
         * @param contentDisposition  (optional)
         * @return UploadFormFolderRequestBuilder
         */
        public UploadFormFolderRequestBuilder contentDisposition(String contentDisposition) {
            this.contentDisposition = contentDisposition;
            return this;
        }
        
        /**
         * Set headers
         * @param headers  (optional)
         * @return UploadFormFolderRequestBuilder
         */
        public UploadFormFolderRequestBuilder headers(Map<String, List<String>> headers) {
            this.headers = headers;
            return this;
        }
        
        /**
         * Set length
         * @param length  (optional)
         * @return UploadFormFolderRequestBuilder
         */
        public UploadFormFolderRequestBuilder length(Long length) {
            this.length = length;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UploadFormFolderRequestBuilder
         */
        public UploadFormFolderRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set fileName
         * @param fileName  (optional)
         * @return UploadFormFolderRequestBuilder
         */
        public UploadFormFolderRequestBuilder fileName(String fileName) {
            this.fileName = fileName;
            return this;
        }
        
        /**
         * Build call for uploadFormFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFormsUploadFormFolderRequest1 customFormsUploadFormFolderRequest1 = buildBodyParams();
            return uploadFormFolderCall(name, customFormsUploadFormFolderRequest1, _callback);
        }

        private CustomFormsUploadFormFolderRequest1 buildBodyParams() {
            CustomFormsUploadFormFolderRequest1 customFormsUploadFormFolderRequest1 = new CustomFormsUploadFormFolderRequest1();
            customFormsUploadFormFolderRequest1.contentType(this.contentType);
            customFormsUploadFormFolderRequest1.contentDisposition(this.contentDisposition);
            customFormsUploadFormFolderRequest1.headers(this.headers);
            customFormsUploadFormFolderRequest1.length(this.length);
            customFormsUploadFormFolderRequest1.name(this.name);
            customFormsUploadFormFolderRequest1.fileName(this.fileName);
            return customFormsUploadFormFolderRequest1;
        }

        /**
         * Execute uploadFormFolder request
         * @return PayToolsApiModelsCustomFormUploadModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsCustomFormUploadModel execute() throws ApiException {
            CustomFormsUploadFormFolderRequest1 customFormsUploadFormFolderRequest1 = buildBodyParams();
            ApiResponse<PayToolsApiModelsCustomFormUploadModel> localVarResp = uploadFormFolderWithHttpInfo(name, customFormsUploadFormFolderRequest1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadFormFolder request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsCustomFormUploadModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsCustomFormUploadModel> executeWithHttpInfo() throws ApiException {
            CustomFormsUploadFormFolderRequest1 customFormsUploadFormFolderRequest1 = buildBodyParams();
            return uploadFormFolderWithHttpInfo(name, customFormsUploadFormFolderRequest1);
        }

        /**
         * Execute uploadFormFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsCustomFormUploadModel> _callback) throws ApiException {
            CustomFormsUploadFormFolderRequest1 customFormsUploadFormFolderRequest1 = buildBodyParams();
            return uploadFormFolderAsync(name, customFormsUploadFormFolderRequest1, _callback);
        }
    }

    /**
     * Upload a custom form folder (add or replace)
     * This method allows you to upload a custom form into PCI Booking. You can design your custom form copletely on your own and upload any and all related content (JavaScript, stylesheet, images, etc) to PCI Booking. All content should be stored in one ZIP file that you will provide in this request.  The uploaded data should be a zip file, properly encoded as a part named &#39;zipFile&#39; in the body.
     * @param name The unique name to identify this form in PCI Booking. You will use this value whenever referencing this custom form. (required)
     * @return UploadFormFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public UploadFormFolderRequestBuilder uploadFormFolder(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new UploadFormFolderRequestBuilder(name);
    }
}
