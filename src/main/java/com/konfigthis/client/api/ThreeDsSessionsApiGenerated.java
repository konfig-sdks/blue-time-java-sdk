/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayToolsApiModelsJwsOutputModel;
import com.konfigthis.client.model.PayToolsBlAuthenticationThreeDsSessionModel;
import com.konfigthis.client.model.PayToolsSharedModelsMoneyModel;
import com.konfigthis.client.model.PayToolsSharedModelsThreeDsClientMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ThreeDsSessionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ThreeDsSessionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ThreeDsSessionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getChallengeStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ThreeDsSessions/challengeStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JwsAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChallengeStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getChallengeStatusCall(_callback);

    }


    private ApiResponse<PayToolsSharedModelsThreeDsClientMessage> getChallengeStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getChallengeStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PayToolsSharedModelsThreeDsClientMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChallengeStatusAsync(final ApiCallback<PayToolsSharedModelsThreeDsClientMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChallengeStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PayToolsSharedModelsThreeDsClientMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChallengeStatusRequestBuilder {

        private GetChallengeStatusRequestBuilder() {
        }

        /**
         * Build call for getChallengeStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChallengeStatusCall(_callback);
        }


        /**
         * Execute getChallengeStatus request
         * @return PayToolsSharedModelsThreeDsClientMessage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsSharedModelsThreeDsClientMessage execute() throws ApiException {
            ApiResponse<PayToolsSharedModelsThreeDsClientMessage> localVarResp = getChallengeStatusWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChallengeStatus request with HTTP info returned
         * @return ApiResponse&lt;PayToolsSharedModelsThreeDsClientMessage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsSharedModelsThreeDsClientMessage> executeWithHttpInfo() throws ApiException {
            return getChallengeStatusWithHttpInfo();
        }

        /**
         * Execute getChallengeStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsSharedModelsThreeDsClientMessage> _callback) throws ApiException {
            return getChallengeStatusAsync(_callback);
        }
    }

    /**
     * Get challenge ststus, as stored on server
     * 
     * @return GetChallengeStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public GetChallengeStatusRequestBuilder getChallengeStatus() throws IllegalArgumentException {
        return new GetChallengeStatusRequestBuilder();
    }
    private okhttp3.Call getTokenStartOperationCall(Integer ttl, PayToolsBlAuthenticationThreeDsSessionModel payToolsBlAuthenticationThreeDsSessionModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsBlAuthenticationThreeDsSessionModel;

        // create path and map variables
        String localVarPath = "/ThreeDsSessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenStartOperationValidateBeforeCall(Integer ttl, PayToolsBlAuthenticationThreeDsSessionModel payToolsBlAuthenticationThreeDsSessionModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ttl' is set
        if (ttl == null) {
            throw new ApiException("Missing the required parameter 'ttl' when calling getTokenStartOperation(Async)");
        }

        return getTokenStartOperationCall(ttl, payToolsBlAuthenticationThreeDsSessionModel, _callback);

    }


    private ApiResponse<PayToolsApiModelsJwsOutputModel> getTokenStartOperationWithHttpInfo(Integer ttl, PayToolsBlAuthenticationThreeDsSessionModel payToolsBlAuthenticationThreeDsSessionModel) throws ApiException {
        okhttp3.Call localVarCall = getTokenStartOperationValidateBeforeCall(ttl, payToolsBlAuthenticationThreeDsSessionModel, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsJwsOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTokenStartOperationAsync(Integer ttl, PayToolsBlAuthenticationThreeDsSessionModel payToolsBlAuthenticationThreeDsSessionModel, final ApiCallback<PayToolsApiModelsJwsOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenStartOperationValidateBeforeCall(ttl, payToolsBlAuthenticationThreeDsSessionModel, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsJwsOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTokenStartOperationRequestBuilder {
        private final String merchantAccountName;
        private final PayToolsSharedModelsMoneyModel amt;
        private final Integer ttl;

        private GetTokenStartOperationRequestBuilder(String merchantAccountName, PayToolsSharedModelsMoneyModel amt, Integer ttl) {
            this.merchantAccountName = merchantAccountName;
            this.amt = amt;
            this.ttl = ttl;
        }

        /**
         * Build call for getTokenStartOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsBlAuthenticationThreeDsSessionModel payToolsBlAuthenticationThreeDsSessionModel = buildBodyParams();
            return getTokenStartOperationCall(ttl, payToolsBlAuthenticationThreeDsSessionModel, _callback);
        }

        private PayToolsBlAuthenticationThreeDsSessionModel buildBodyParams() {
            PayToolsBlAuthenticationThreeDsSessionModel payToolsBlAuthenticationThreeDsSessionModel = new PayToolsBlAuthenticationThreeDsSessionModel();
            payToolsBlAuthenticationThreeDsSessionModel.merchantAccountName(this.merchantAccountName);
            payToolsBlAuthenticationThreeDsSessionModel.amt(this.amt);
            return payToolsBlAuthenticationThreeDsSessionModel;
        }

        /**
         * Execute getTokenStartOperation request
         * @return PayToolsApiModelsJwsOutputModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsJwsOutputModel execute() throws ApiException {
            PayToolsBlAuthenticationThreeDsSessionModel payToolsBlAuthenticationThreeDsSessionModel = buildBodyParams();
            ApiResponse<PayToolsApiModelsJwsOutputModel> localVarResp = getTokenStartOperationWithHttpInfo(ttl, payToolsBlAuthenticationThreeDsSessionModel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTokenStartOperation request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsJwsOutputModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsJwsOutputModel> executeWithHttpInfo() throws ApiException {
            PayToolsBlAuthenticationThreeDsSessionModel payToolsBlAuthenticationThreeDsSessionModel = buildBodyParams();
            return getTokenStartOperationWithHttpInfo(ttl, payToolsBlAuthenticationThreeDsSessionModel);
        }

        /**
         * Execute getTokenStartOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsJwsOutputModel> _callback) throws ApiException {
            PayToolsBlAuthenticationThreeDsSessionModel payToolsBlAuthenticationThreeDsSessionModel = buildBodyParams();
            return getTokenStartOperationAsync(ttl, payToolsBlAuthenticationThreeDsSessionModel, _callback);
        }
    }

    /**
     * Get a token to start a card operation
     * 
     * @param ttl Time to live for the returned token (required)
     * @return GetTokenStartOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public GetTokenStartOperationRequestBuilder getTokenStartOperation(String merchantAccountName, PayToolsSharedModelsMoneyModel amt, Integer ttl) throws IllegalArgumentException {
        if (merchantAccountName == null) throw new IllegalArgumentException("\"merchantAccountName\" is required but got null");
            if (merchantAccountName != null && merchantAccountName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for merchantAccountName. Length must be greater than or equal to 1.");
            }

        if (amt == null) throw new IllegalArgumentException("\"amt\" is required but got null");
        if (ttl == null) throw new IllegalArgumentException("\"ttl\" is required but got null");
        return new GetTokenStartOperationRequestBuilder(merchantAccountName, amt, ttl);
    }
    private okhttp3.Call handleFingerprintCallbackCall(String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ThreeDsSessions/fingerprintCallback/{sessionId}"
            .replace("{" + "sessionId" + "}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call handleFingerprintCallbackValidateBeforeCall(String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling handleFingerprintCallback(Async)");
        }

        return handleFingerprintCallbackCall(sessionId, _callback);

    }


    private ApiResponse<Void> handleFingerprintCallbackWithHttpInfo(String sessionId) throws ApiException {
        okhttp3.Call localVarCall = handleFingerprintCallbackValidateBeforeCall(sessionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call handleFingerprintCallbackAsync(String sessionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = handleFingerprintCallbackValidateBeforeCall(sessionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class HandleFingerprintCallbackRequestBuilder {
        private final String sessionId;

        private HandleFingerprintCallbackRequestBuilder(String sessionId) {
            this.sessionId = sessionId;
        }

        /**
         * Build call for handleFingerprintCallback
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return handleFingerprintCallbackCall(sessionId, _callback);
        }


        /**
         * Execute handleFingerprintCallback request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            handleFingerprintCallbackWithHttpInfo(sessionId);
        }

        /**
         * Execute handleFingerprintCallback request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return handleFingerprintCallbackWithHttpInfo(sessionId);
        }

        /**
         * Execute handleFingerprintCallback request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return handleFingerprintCallbackAsync(sessionId, _callback);
        }
    }

    /**
     * Handle a callback (redirect from device fingerprint)
     * 
     * @param sessionId The value containing data to designate the client (required)
     * @return HandleFingerprintCallbackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HandleFingerprintCallbackRequestBuilder handleFingerprintCallback(String sessionId) throws IllegalArgumentException {
        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
            

        return new HandleFingerprintCallbackRequestBuilder(sessionId);
    }
    private okhttp3.Call handleMpiChallengeCallbackCall(String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ThreeDsSessions/mpiChallengeCallback/{sessionId}"
            .replace("{" + "sessionId" + "}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call handleMpiChallengeCallbackValidateBeforeCall(String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling handleMpiChallengeCallback(Async)");
        }

        return handleMpiChallengeCallbackCall(sessionId, _callback);

    }


    private ApiResponse<Void> handleMpiChallengeCallbackWithHttpInfo(String sessionId) throws ApiException {
        okhttp3.Call localVarCall = handleMpiChallengeCallbackValidateBeforeCall(sessionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call handleMpiChallengeCallbackAsync(String sessionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = handleMpiChallengeCallbackValidateBeforeCall(sessionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class HandleMpiChallengeCallbackRequestBuilder {
        private final String sessionId;

        private HandleMpiChallengeCallbackRequestBuilder(String sessionId) {
            this.sessionId = sessionId;
        }

        /**
         * Build call for handleMpiChallengeCallback
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return handleMpiChallengeCallbackCall(sessionId, _callback);
        }


        /**
         * Execute handleMpiChallengeCallback request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            handleMpiChallengeCallbackWithHttpInfo(sessionId);
        }

        /**
         * Execute handleMpiChallengeCallback request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return handleMpiChallengeCallbackWithHttpInfo(sessionId);
        }

        /**
         * Execute handleMpiChallengeCallback request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return handleMpiChallengeCallbackAsync(sessionId, _callback);
        }
    }

    /**
     * Handle a callback (redirect from challenge)
     * 
     * @param sessionId The value containing data to designate the client (required)
     * @return HandleMpiChallengeCallbackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HandleMpiChallengeCallbackRequestBuilder handleMpiChallengeCallback(String sessionId) throws IllegalArgumentException {
        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
            

        return new HandleMpiChallengeCallbackRequestBuilder(sessionId);
    }
    private okhttp3.Call performValidationOperationCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ThreeDsSessions/opValidate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JwsAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performValidationOperationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return performValidationOperationCall(_callback);

    }


    private ApiResponse<Void> performValidationOperationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = performValidationOperationValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call performValidationOperationAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = performValidationOperationValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PerformValidationOperationRequestBuilder {

        private PerformValidationOperationRequestBuilder() {
        }

        /**
         * Build call for performValidationOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return performValidationOperationCall(_callback);
        }


        /**
         * Execute performValidationOperation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            performValidationOperationWithHttpInfo();
        }

        /**
         * Execute performValidationOperation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return performValidationOperationWithHttpInfo();
        }

        /**
         * Execute performValidationOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return performValidationOperationAsync(_callback);
        }
    }

    /**
     * Perform validation of the operation using to signed data
     * 
     * @return PerformValidationOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public PerformValidationOperationRequestBuilder performValidationOperation() throws IllegalArgumentException {
        return new PerformValidationOperationRequestBuilder();
    }
}
