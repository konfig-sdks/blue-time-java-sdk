/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayToolsApiModelsThreeDsMerchantOutputModel;
import com.konfigthis.client.model.PayToolsDalEntitiesThreeDsBrand;
import com.konfigthis.client.model.PayToolsDalEntitiesThreeDsMerchant;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ThreeDsMerchantsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ThreeDsMerchantsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ThreeDsMerchantsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getMerchantInfoCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ThreeDsMerchants/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantInfoValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getMerchantInfo(Async)");
        }

        return getMerchantInfoCall(name, _callback);

    }


    private ApiResponse<PayToolsApiModelsThreeDsMerchantOutputModel> getMerchantInfoWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getMerchantInfoValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsThreeDsMerchantOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMerchantInfoAsync(String name, final ApiCallback<PayToolsApiModelsThreeDsMerchantOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantInfoValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsThreeDsMerchantOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMerchantInfoRequestBuilder {
        private final String name;

        private GetMerchantInfoRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for getMerchantInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMerchantInfoCall(name, _callback);
        }


        /**
         * Execute getMerchantInfo request
         * @return PayToolsApiModelsThreeDsMerchantOutputModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsThreeDsMerchantOutputModel execute() throws ApiException {
            ApiResponse<PayToolsApiModelsThreeDsMerchantOutputModel> localVarResp = getMerchantInfoWithHttpInfo(name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMerchantInfo request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsThreeDsMerchantOutputModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsThreeDsMerchantOutputModel> executeWithHttpInfo() throws ApiException {
            return getMerchantInfoWithHttpInfo(name);
        }

        /**
         * Execute getMerchantInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsThreeDsMerchantOutputModel> _callback) throws ApiException {
            return getMerchantInfoAsync(name, _callback);
        }
    }

    /**
     * Get a Merchant
     * 
     * @param name Name of merchant (required)
     * @return GetMerchantInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public GetMerchantInfoRequestBuilder getMerchantInfo(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new GetMerchantInfoRequestBuilder(name);
    }
    private okhttp3.Call listMerchantsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ThreeDsMerchants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMerchantsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listMerchantsCall(_callback);

    }


    private ApiResponse<List<PayToolsApiModelsThreeDsMerchantOutputModel>> listMerchantsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listMerchantsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PayToolsApiModelsThreeDsMerchantOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMerchantsAsync(final ApiCallback<List<PayToolsApiModelsThreeDsMerchantOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMerchantsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PayToolsApiModelsThreeDsMerchantOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMerchantsRequestBuilder {

        private ListMerchantsRequestBuilder() {
        }

        /**
         * Build call for listMerchants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMerchantsCall(_callback);
        }


        /**
         * Execute listMerchants request
         * @return List&lt;PayToolsApiModelsThreeDsMerchantOutputModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public List<PayToolsApiModelsThreeDsMerchantOutputModel> execute() throws ApiException {
            ApiResponse<List<PayToolsApiModelsThreeDsMerchantOutputModel>> localVarResp = listMerchantsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMerchants request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PayToolsApiModelsThreeDsMerchantOutputModel&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PayToolsApiModelsThreeDsMerchantOutputModel>> executeWithHttpInfo() throws ApiException {
            return listMerchantsWithHttpInfo();
        }

        /**
         * Execute listMerchants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PayToolsApiModelsThreeDsMerchantOutputModel>> _callback) throws ApiException {
            return listMerchantsAsync(_callback);
        }
    }

    /**
     * List Merchants
     * 
     * @return ListMerchantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public ListMerchantsRequestBuilder listMerchants() throws IllegalArgumentException {
        return new ListMerchantsRequestBuilder();
    }
    private okhttp3.Call removeMerchantCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ThreeDsMerchants/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMerchantValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling removeMerchant(Async)");
        }

        return removeMerchantCall(name, _callback);

    }


    private ApiResponse<Void> removeMerchantWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = removeMerchantValidateBeforeCall(name, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeMerchantAsync(String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMerchantValidateBeforeCall(name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveMerchantRequestBuilder {
        private final String name;

        private RemoveMerchantRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for removeMerchant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeMerchantCall(name, _callback);
        }


        /**
         * Execute removeMerchant request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeMerchantWithHttpInfo(name);
        }

        /**
         * Execute removeMerchant request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeMerchantWithHttpInfo(name);
        }

        /**
         * Execute removeMerchant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeMerchantAsync(name, _callback);
        }
    }

    /**
     * Delete a Merchant
     * 
     * @param name Name of merchant (required)
     * @return RemoveMerchantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMerchantRequestBuilder removeMerchant(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new RemoveMerchantRequestBuilder(name);
    }
    private okhttp3.Call updateMerchantInfoCall(String name, PayToolsDalEntitiesThreeDsMerchant payToolsDalEntitiesThreeDsMerchant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsDalEntitiesThreeDsMerchant;

        // create path and map variables
        String localVarPath = "/ThreeDsMerchants/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMerchantInfoValidateBeforeCall(String name, PayToolsDalEntitiesThreeDsMerchant payToolsDalEntitiesThreeDsMerchant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateMerchantInfo(Async)");
        }

        return updateMerchantInfoCall(name, payToolsDalEntitiesThreeDsMerchant, _callback);

    }


    private ApiResponse<PayToolsDalEntitiesThreeDsMerchant> updateMerchantInfoWithHttpInfo(String name, PayToolsDalEntitiesThreeDsMerchant payToolsDalEntitiesThreeDsMerchant) throws ApiException {
        okhttp3.Call localVarCall = updateMerchantInfoValidateBeforeCall(name, payToolsDalEntitiesThreeDsMerchant, null);
        Type localVarReturnType = new TypeToken<PayToolsDalEntitiesThreeDsMerchant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMerchantInfoAsync(String name, PayToolsDalEntitiesThreeDsMerchant payToolsDalEntitiesThreeDsMerchant, final ApiCallback<PayToolsDalEntitiesThreeDsMerchant> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMerchantInfoValidateBeforeCall(name, payToolsDalEntitiesThreeDsMerchant, _callback);
        Type localVarReturnType = new TypeToken<PayToolsDalEntitiesThreeDsMerchant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMerchantInfoRequestBuilder {
        private final String merchantName;
        private final String merchantDisplayName;
        private final String merchantRequestorIdSuffix;
        private final String merchantCountry;
        private final URI merchantUrl;
        private final String acquirerName;
        private final String name;
        private List<PayToolsDalEntitiesThreeDsBrand> brands;

        private UpdateMerchantInfoRequestBuilder(String merchantName, String merchantDisplayName, String merchantRequestorIdSuffix, String merchantCountry, URI merchantUrl, String acquirerName, String name) {
            this.merchantName = merchantName;
            this.merchantDisplayName = merchantDisplayName;
            this.merchantRequestorIdSuffix = merchantRequestorIdSuffix;
            this.merchantCountry = merchantCountry;
            this.merchantUrl = merchantUrl;
            this.acquirerName = acquirerName;
            this.name = name;
        }

        /**
         * Set brands
         * @param brands  (optional)
         * @return UpdateMerchantInfoRequestBuilder
         */
        public UpdateMerchantInfoRequestBuilder brands(List<PayToolsDalEntitiesThreeDsBrand> brands) {
            this.brands = brands;
            return this;
        }
        
        /**
         * Build call for updateMerchantInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsDalEntitiesThreeDsMerchant payToolsDalEntitiesThreeDsMerchant = buildBodyParams();
            return updateMerchantInfoCall(name, payToolsDalEntitiesThreeDsMerchant, _callback);
        }

        private PayToolsDalEntitiesThreeDsMerchant buildBodyParams() {
            PayToolsDalEntitiesThreeDsMerchant payToolsDalEntitiesThreeDsMerchant = new PayToolsDalEntitiesThreeDsMerchant();
            payToolsDalEntitiesThreeDsMerchant.merchantName(this.merchantName);
            payToolsDalEntitiesThreeDsMerchant.merchantDisplayName(this.merchantDisplayName);
            payToolsDalEntitiesThreeDsMerchant.merchantRequestorIdSuffix(this.merchantRequestorIdSuffix);
            payToolsDalEntitiesThreeDsMerchant.merchantCountry(this.merchantCountry);
            payToolsDalEntitiesThreeDsMerchant.merchantUrl(this.merchantUrl);
            payToolsDalEntitiesThreeDsMerchant.acquirerName(this.acquirerName);
            payToolsDalEntitiesThreeDsMerchant.brands(this.brands);
            return payToolsDalEntitiesThreeDsMerchant;
        }

        /**
         * Execute updateMerchantInfo request
         * @return PayToolsDalEntitiesThreeDsMerchant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsDalEntitiesThreeDsMerchant execute() throws ApiException {
            PayToolsDalEntitiesThreeDsMerchant payToolsDalEntitiesThreeDsMerchant = buildBodyParams();
            ApiResponse<PayToolsDalEntitiesThreeDsMerchant> localVarResp = updateMerchantInfoWithHttpInfo(name, payToolsDalEntitiesThreeDsMerchant);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMerchantInfo request with HTTP info returned
         * @return ApiResponse&lt;PayToolsDalEntitiesThreeDsMerchant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsDalEntitiesThreeDsMerchant> executeWithHttpInfo() throws ApiException {
            PayToolsDalEntitiesThreeDsMerchant payToolsDalEntitiesThreeDsMerchant = buildBodyParams();
            return updateMerchantInfoWithHttpInfo(name, payToolsDalEntitiesThreeDsMerchant);
        }

        /**
         * Execute updateMerchantInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsDalEntitiesThreeDsMerchant> _callback) throws ApiException {
            PayToolsDalEntitiesThreeDsMerchant payToolsDalEntitiesThreeDsMerchant = buildBodyParams();
            return updateMerchantInfoAsync(name, payToolsDalEntitiesThreeDsMerchant, _callback);
        }
    }

    /**
     * Set a merchant
     * 
     * @param name Name of merchant (required)
     * @return UpdateMerchantInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMerchantInfoRequestBuilder updateMerchantInfo(String merchantName, String merchantDisplayName, String merchantRequestorIdSuffix, String merchantCountry, URI merchantUrl, String acquirerName, String name) throws IllegalArgumentException {
        if (merchantName == null) throw new IllegalArgumentException("\"merchantName\" is required but got null");
            if (merchantName != null && merchantName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for merchantName. Length must be greater than or equal to 1.");
            }

        if (merchantDisplayName == null) throw new IllegalArgumentException("\"merchantDisplayName\" is required but got null");
            if (merchantDisplayName != null && merchantDisplayName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for merchantDisplayName. Length must be greater than or equal to 1.");
            }

        if (merchantRequestorIdSuffix == null) throw new IllegalArgumentException("\"merchantRequestorIdSuffix\" is required but got null");
            if (merchantRequestorIdSuffix != null && merchantRequestorIdSuffix.length() < 1) {
              throw new IllegalArgumentException("Invalid value for merchantRequestorIdSuffix. Length must be greater than or equal to 1.");
            }

        if (merchantCountry == null) throw new IllegalArgumentException("\"merchantCountry\" is required but got null");
            if (merchantCountry != null && merchantCountry.length() < 1) {
              throw new IllegalArgumentException("Invalid value for merchantCountry. Length must be greater than or equal to 1.");
            }

        if (merchantUrl == null) throw new IllegalArgumentException("\"merchantUrl\" is required but got null");
            if (merchantUrl != null && merchantUrl.length() < 1) {
              throw new IllegalArgumentException("Invalid value for merchantUrl. Length must be greater than or equal to 1.");
            }

        if (acquirerName == null) throw new IllegalArgumentException("\"acquirerName\" is required but got null");
            if (acquirerName != null && acquirerName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for acquirerName. Length must be greater than or equal to 1.");
            }

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new UpdateMerchantInfoRequestBuilder(merchantName, merchantDisplayName, merchantRequestorIdSuffix, merchantCountry, merchantUrl, acquirerName, name);
    }
}
