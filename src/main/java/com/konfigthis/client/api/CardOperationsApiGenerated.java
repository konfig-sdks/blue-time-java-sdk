/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayToolsApiModelsBrandLookupResult;
import com.konfigthis.client.model.PayToolsApiModelsCardInputModel;
import com.konfigthis.client.model.PayToolsApiModelsCardOpsChargeRequest;
import com.konfigthis.client.model.PayToolsApiModelsJwsMultipleOutputModel;
import com.konfigthis.client.model.PayToolsApiModelsJwsOutputModel1PayToolsApiModelsStringTokenMetaDataOutputModelPayToolsApiVersion10715CultureneutralPublicKeyTokennull;
import com.konfigthis.client.model.PayToolsApiModelsJwsOutputModel1PaymentsOperationResultPaymentsVersion0000CultureneutralPublicKeyTokennull;
import com.konfigthis.client.model.PayToolsApiModelsJwsOutputModel1pciBookingIINLookupLibraryCardValidationResultpciBookingIINLookupLibraryVersion1040CultureneutralPublicKeyTokennull;
import com.konfigthis.client.model.PayToolsApiModelsPayerBase;
import com.konfigthis.client.model.PayToolsApiModelsPayerDetailsNoIpAddress;
import com.konfigthis.client.model.PayToolsApiModelsStringTokenIntputModel;
import com.konfigthis.client.model.PayToolsApiModelsTopBrands;
import com.konfigthis.client.model.PayToolsBlAuthenticationChargePresetData;
import com.konfigthis.client.model.PayToolsBlAuthenticationPreSignedDataModel;
import com.konfigthis.client.model.PayToolsBlAuthenticationSignedData;
import com.konfigthis.client.model.PayToolsBlAuthenticationThreeDsSessionModel;
import com.konfigthis.client.model.PayToolsBlAuthenticationTokenizationAction;
import com.konfigthis.client.model.PayToolsSharedEnumsPerform3ds;
import com.konfigthis.client.model.PciBookingIINLookupLibraryRiskLevel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CardOperationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CardOperationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CardOperationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getBrandPrefixCall(String iin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CardOperations/brand";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iin", iin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JwsAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrandPrefixValidateBeforeCall(String iin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iin' is set
        if (iin == null) {
            throw new ApiException("Missing the required parameter 'iin' when calling getBrandPrefix(Async)");
        }

        return getBrandPrefixCall(iin, _callback);

    }


    private ApiResponse<PayToolsApiModelsBrandLookupResult> getBrandPrefixWithHttpInfo(String iin) throws ApiException {
        okhttp3.Call localVarCall = getBrandPrefixValidateBeforeCall(iin, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsBrandLookupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBrandPrefixAsync(String iin, final ApiCallback<PayToolsApiModelsBrandLookupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrandPrefixValidateBeforeCall(iin, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsBrandLookupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBrandPrefixRequestBuilder {
        private final String iin;

        private GetBrandPrefixRequestBuilder(String iin) {
            this.iin = iin;
        }

        /**
         * Build call for getBrandPrefix
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBrandPrefixCall(iin, _callback);
        }


        /**
         * Execute getBrandPrefix request
         * @return PayToolsApiModelsBrandLookupResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsBrandLookupResult execute() throws ApiException {
            ApiResponse<PayToolsApiModelsBrandLookupResult> localVarResp = getBrandPrefixWithHttpInfo(iin);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBrandPrefix request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsBrandLookupResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsBrandLookupResult> executeWithHttpInfo() throws ApiException {
            return getBrandPrefixWithHttpInfo(iin);
        }

        /**
         * Execute getBrandPrefix request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsBrandLookupResult> _callback) throws ApiException {
            return getBrandPrefixAsync(iin, _callback);
        }
    }

    /**
     * Return brand of card prefix.
     * 
     * @param iin Card prefix (required)
     * @return GetBrandPrefixRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public GetBrandPrefixRequestBuilder getBrandPrefix(String iin) throws IllegalArgumentException {
        if (iin == null) throw new IllegalArgumentException("\"iin\" is required but got null");
            

        return new GetBrandPrefixRequestBuilder(iin);
    }
    private okhttp3.Call getTokenStartOperationCall(Integer ttl, PayToolsBlAuthenticationPreSignedDataModel payToolsBlAuthenticationPreSignedDataModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsBlAuthenticationPreSignedDataModel;

        // create path and map variables
        String localVarPath = "/CardOperations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenStartOperationValidateBeforeCall(Integer ttl, PayToolsBlAuthenticationPreSignedDataModel payToolsBlAuthenticationPreSignedDataModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ttl' is set
        if (ttl == null) {
            throw new ApiException("Missing the required parameter 'ttl' when calling getTokenStartOperation(Async)");
        }

        return getTokenStartOperationCall(ttl, payToolsBlAuthenticationPreSignedDataModel, _callback);

    }


    private ApiResponse<PayToolsApiModelsJwsMultipleOutputModel> getTokenStartOperationWithHttpInfo(Integer ttl, PayToolsBlAuthenticationPreSignedDataModel payToolsBlAuthenticationPreSignedDataModel) throws ApiException {
        okhttp3.Call localVarCall = getTokenStartOperationValidateBeforeCall(ttl, payToolsBlAuthenticationPreSignedDataModel, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsJwsMultipleOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTokenStartOperationAsync(Integer ttl, PayToolsBlAuthenticationPreSignedDataModel payToolsBlAuthenticationPreSignedDataModel, final ApiCallback<PayToolsApiModelsJwsMultipleOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenStartOperationValidateBeforeCall(ttl, payToolsBlAuthenticationPreSignedDataModel, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsJwsMultipleOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTokenStartOperationRequestBuilder {
        private final Integer ttl;
        private PayToolsBlAuthenticationThreeDsSessionModel threeDsSessionModel;
        private PciBookingIINLookupLibraryRiskLevel vld;
        private PayToolsSharedEnumsPerform3ds _3ds;
        private Boolean crg;
        private PayToolsBlAuthenticationTokenizationAction tkn;
        private PayToolsBlAuthenticationChargePresetData crgD;

        private GetTokenStartOperationRequestBuilder(Integer ttl) {
            this.ttl = ttl;
        }

        /**
         * Set threeDsSessionModel
         * @param threeDsSessionModel  (optional)
         * @return GetTokenStartOperationRequestBuilder
         */
        public GetTokenStartOperationRequestBuilder threeDsSessionModel(PayToolsBlAuthenticationThreeDsSessionModel threeDsSessionModel) {
            this.threeDsSessionModel = threeDsSessionModel;
            return this;
        }
        
        /**
         * Set vld
         * @param vld  (optional)
         * @return GetTokenStartOperationRequestBuilder
         */
        public GetTokenStartOperationRequestBuilder vld(PciBookingIINLookupLibraryRiskLevel vld) {
            this.vld = vld;
            return this;
        }
        
        /**
         * Set _3ds
         * @param _3ds  (optional)
         * @return GetTokenStartOperationRequestBuilder
         */
        public GetTokenStartOperationRequestBuilder _3ds(PayToolsSharedEnumsPerform3ds _3ds) {
            this._3ds = _3ds;
            return this;
        }
        
        /**
         * Set crg
         * @param crg Is Card charge required for this session (optional)
         * @return GetTokenStartOperationRequestBuilder
         */
        public GetTokenStartOperationRequestBuilder crg(Boolean crg) {
            this.crg = crg;
            return this;
        }
        
        /**
         * Set tkn
         * @param tkn  (optional)
         * @return GetTokenStartOperationRequestBuilder
         */
        public GetTokenStartOperationRequestBuilder tkn(PayToolsBlAuthenticationTokenizationAction tkn) {
            this.tkn = tkn;
            return this;
        }
        
        /**
         * Set crgD
         * @param crgD  (optional)
         * @return GetTokenStartOperationRequestBuilder
         */
        public GetTokenStartOperationRequestBuilder crgD(PayToolsBlAuthenticationChargePresetData crgD) {
            this.crgD = crgD;
            return this;
        }
        
        /**
         * Build call for getTokenStartOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsBlAuthenticationPreSignedDataModel payToolsBlAuthenticationPreSignedDataModel = buildBodyParams();
            return getTokenStartOperationCall(ttl, payToolsBlAuthenticationPreSignedDataModel, _callback);
        }

        private PayToolsBlAuthenticationPreSignedDataModel buildBodyParams() {
            PayToolsBlAuthenticationPreSignedDataModel payToolsBlAuthenticationPreSignedDataModel = new PayToolsBlAuthenticationPreSignedDataModel();
            payToolsBlAuthenticationPreSignedDataModel.threeDsSessionModel(this.threeDsSessionModel);
            payToolsBlAuthenticationPreSignedDataModel.vld(this.vld);
            payToolsBlAuthenticationPreSignedDataModel._3ds(this._3ds);
            payToolsBlAuthenticationPreSignedDataModel.crg(this.crg);
            payToolsBlAuthenticationPreSignedDataModel.tkn(this.tkn);
            payToolsBlAuthenticationPreSignedDataModel.crgD(this.crgD);
            return payToolsBlAuthenticationPreSignedDataModel;
        }

        /**
         * Execute getTokenStartOperation request
         * @return PayToolsApiModelsJwsMultipleOutputModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsJwsMultipleOutputModel execute() throws ApiException {
            PayToolsBlAuthenticationPreSignedDataModel payToolsBlAuthenticationPreSignedDataModel = buildBodyParams();
            ApiResponse<PayToolsApiModelsJwsMultipleOutputModel> localVarResp = getTokenStartOperationWithHttpInfo(ttl, payToolsBlAuthenticationPreSignedDataModel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTokenStartOperation request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsJwsMultipleOutputModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsJwsMultipleOutputModel> executeWithHttpInfo() throws ApiException {
            PayToolsBlAuthenticationPreSignedDataModel payToolsBlAuthenticationPreSignedDataModel = buildBodyParams();
            return getTokenStartOperationWithHttpInfo(ttl, payToolsBlAuthenticationPreSignedDataModel);
        }

        /**
         * Execute getTokenStartOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsJwsMultipleOutputModel> _callback) throws ApiException {
            PayToolsBlAuthenticationPreSignedDataModel payToolsBlAuthenticationPreSignedDataModel = buildBodyParams();
            return getTokenStartOperationAsync(ttl, payToolsBlAuthenticationPreSignedDataModel, _callback);
        }
    }

    /**
     * Get a token to start a card operation
     * 
     * @param ttl Time to live for the returned token (required)
     * @return GetTokenStartOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public GetTokenStartOperationRequestBuilder getTokenStartOperation(Integer ttl) throws IllegalArgumentException {
        if (ttl == null) throw new IllegalArgumentException("\"ttl\" is required but got null");
        return new GetTokenStartOperationRequestBuilder(ttl);
    }
    private okhttp3.Call getTopBrandsLookupCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CardOperations/topBrands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JwsAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopBrandsLookupValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTopBrandsLookupCall(_callback);

    }


    private ApiResponse<PayToolsApiModelsTopBrands> getTopBrandsLookupWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTopBrandsLookupValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsTopBrands>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTopBrandsLookupAsync(final ApiCallback<PayToolsApiModelsTopBrands> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopBrandsLookupValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsTopBrands>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTopBrandsLookupRequestBuilder {

        private GetTopBrandsLookupRequestBuilder() {
        }

        /**
         * Build call for getTopBrandsLookup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTopBrandsLookupCall(_callback);
        }


        /**
         * Execute getTopBrandsLookup request
         * @return PayToolsApiModelsTopBrands
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsTopBrands execute() throws ApiException {
            ApiResponse<PayToolsApiModelsTopBrands> localVarResp = getTopBrandsLookupWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTopBrandsLookup request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsTopBrands&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsTopBrands> executeWithHttpInfo() throws ApiException {
            return getTopBrandsLookupWithHttpInfo();
        }

        /**
         * Execute getTopBrandsLookup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsTopBrands> _callback) throws ApiException {
            return getTopBrandsLookupAsync(_callback);
        }
    }

    /**
     * Return top credit card brands for lookup of up to 5 first digits. It covers 90% of the cases
     * The result is an array of 5 elements, where each element represents iin prefixes for a givel size as well as the list of logo Url&#39;s for all brands.  Each element in the top-level array is an object where members are prefixes and data is the brand.  For a quick lookup:  1. get the element by the size of your prefix.  2. try to obtain the prefix as a member name; The member value is the brand    For logo lookup finf thr brand name as the key to the logos member.  If not found, you can try using &#39;DEFAULT&#39;.
     * @return GetTopBrandsLookupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public GetTopBrandsLookupRequestBuilder getTopBrandsLookup() throws IllegalArgumentException {
        return new GetTopBrandsLookupRequestBuilder();
    }
    private okhttp3.Call performUniversalPaymentGatewayChargeCall(PayToolsApiModelsCardOpsChargeRequest payToolsApiModelsCardOpsChargeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsApiModelsCardOpsChargeRequest;

        // create path and map variables
        String localVarPath = "/CardOperations/charge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JwsAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performUniversalPaymentGatewayChargeValidateBeforeCall(PayToolsApiModelsCardOpsChargeRequest payToolsApiModelsCardOpsChargeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payToolsApiModelsCardOpsChargeRequest' is set
        if (payToolsApiModelsCardOpsChargeRequest == null) {
            throw new ApiException("Missing the required parameter 'payToolsApiModelsCardOpsChargeRequest' when calling performUniversalPaymentGatewayCharge(Async)");
        }

        return performUniversalPaymentGatewayChargeCall(payToolsApiModelsCardOpsChargeRequest, _callback);

    }


    private ApiResponse<PayToolsApiModelsJwsOutputModel1PaymentsOperationResultPaymentsVersion0000CultureneutralPublicKeyTokennull> performUniversalPaymentGatewayChargeWithHttpInfo(PayToolsApiModelsCardOpsChargeRequest payToolsApiModelsCardOpsChargeRequest) throws ApiException {
        okhttp3.Call localVarCall = performUniversalPaymentGatewayChargeValidateBeforeCall(payToolsApiModelsCardOpsChargeRequest, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsJwsOutputModel1PaymentsOperationResultPaymentsVersion0000CultureneutralPublicKeyTokennull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call performUniversalPaymentGatewayChargeAsync(PayToolsApiModelsCardOpsChargeRequest payToolsApiModelsCardOpsChargeRequest, final ApiCallback<PayToolsApiModelsJwsOutputModel1PaymentsOperationResultPaymentsVersion0000CultureneutralPublicKeyTokennull> _callback) throws ApiException {

        okhttp3.Call localVarCall = performUniversalPaymentGatewayChargeValidateBeforeCall(payToolsApiModelsCardOpsChargeRequest, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsJwsOutputModel1PaymentsOperationResultPaymentsVersion0000CultureneutralPublicKeyTokennull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PerformUniversalPaymentGatewayChargeRequestBuilder {
        private final PayToolsApiModelsCardInputModel card;
        private PayToolsApiModelsPayerDetailsNoIpAddress payerDetails;
        private String myRef;

        private PerformUniversalPaymentGatewayChargeRequestBuilder(PayToolsApiModelsCardInputModel card) {
            this.card = card;
        }

        /**
         * Set payerDetails
         * @param payerDetails  (optional)
         * @return PerformUniversalPaymentGatewayChargeRequestBuilder
         */
        public PerformUniversalPaymentGatewayChargeRequestBuilder payerDetails(PayToolsApiModelsPayerDetailsNoIpAddress payerDetails) {
            this.payerDetails = payerDetails;
            return this;
        }
        
        /**
         * Set myRef
         * @param myRef Your custom reference for this transaction (optional)
         * @return PerformUniversalPaymentGatewayChargeRequestBuilder
         */
        public PerformUniversalPaymentGatewayChargeRequestBuilder myRef(String myRef) {
            this.myRef = myRef;
            return this;
        }
        
        /**
         * Build call for performUniversalPaymentGatewayCharge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsApiModelsCardOpsChargeRequest payToolsApiModelsCardOpsChargeRequest = buildBodyParams();
            return performUniversalPaymentGatewayChargeCall(payToolsApiModelsCardOpsChargeRequest, _callback);
        }

        private PayToolsApiModelsCardOpsChargeRequest buildBodyParams() {
            PayToolsApiModelsCardOpsChargeRequest payToolsApiModelsCardOpsChargeRequest = new PayToolsApiModelsCardOpsChargeRequest();
            payToolsApiModelsCardOpsChargeRequest.payerDetails(this.payerDetails);
            payToolsApiModelsCardOpsChargeRequest.card(this.card);
            payToolsApiModelsCardOpsChargeRequest.myRef(this.myRef);
            return payToolsApiModelsCardOpsChargeRequest;
        }

        /**
         * Execute performUniversalPaymentGatewayCharge request
         * @return PayToolsApiModelsJwsOutputModel1PaymentsOperationResultPaymentsVersion0000CultureneutralPublicKeyTokennull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsJwsOutputModel1PaymentsOperationResultPaymentsVersion0000CultureneutralPublicKeyTokennull execute() throws ApiException {
            PayToolsApiModelsCardOpsChargeRequest payToolsApiModelsCardOpsChargeRequest = buildBodyParams();
            ApiResponse<PayToolsApiModelsJwsOutputModel1PaymentsOperationResultPaymentsVersion0000CultureneutralPublicKeyTokennull> localVarResp = performUniversalPaymentGatewayChargeWithHttpInfo(payToolsApiModelsCardOpsChargeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute performUniversalPaymentGatewayCharge request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsJwsOutputModel1PaymentsOperationResultPaymentsVersion0000CultureneutralPublicKeyTokennull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsJwsOutputModel1PaymentsOperationResultPaymentsVersion0000CultureneutralPublicKeyTokennull> executeWithHttpInfo() throws ApiException {
            PayToolsApiModelsCardOpsChargeRequest payToolsApiModelsCardOpsChargeRequest = buildBodyParams();
            return performUniversalPaymentGatewayChargeWithHttpInfo(payToolsApiModelsCardOpsChargeRequest);
        }

        /**
         * Execute performUniversalPaymentGatewayCharge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsJwsOutputModel1PaymentsOperationResultPaymentsVersion0000CultureneutralPublicKeyTokennull> _callback) throws ApiException {
            PayToolsApiModelsCardOpsChargeRequest payToolsApiModelsCardOpsChargeRequest = buildBodyParams();
            return performUniversalPaymentGatewayChargeAsync(payToolsApiModelsCardOpsChargeRequest, _callback);
        }
    }

    /**
     * Perform Univesal payment gateway charge operation
     * 
     * @param payToolsApiModelsCardOpsChargeRequest  (required)
     * @return PerformUniversalPaymentGatewayChargeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public PerformUniversalPaymentGatewayChargeRequestBuilder performUniversalPaymentGatewayCharge(PayToolsApiModelsCardInputModel card) throws IllegalArgumentException {
        if (card == null) throw new IllegalArgumentException("\"card\" is required but got null");
        return new PerformUniversalPaymentGatewayChargeRequestBuilder(card);
    }
    private okhttp3.Call performValidationCall(String iin, PayToolsApiModelsPayerBase payToolsApiModelsPayerBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsApiModelsPayerBase;

        // create path and map variables
        String localVarPath = "/CardOperations/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iin", iin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JwsAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performValidationValidateBeforeCall(String iin, PayToolsApiModelsPayerBase payToolsApiModelsPayerBase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iin' is set
        if (iin == null) {
            throw new ApiException("Missing the required parameter 'iin' when calling performValidation(Async)");
        }

        // verify the required parameter 'payToolsApiModelsPayerBase' is set
        if (payToolsApiModelsPayerBase == null) {
            throw new ApiException("Missing the required parameter 'payToolsApiModelsPayerBase' when calling performValidation(Async)");
        }

        return performValidationCall(iin, payToolsApiModelsPayerBase, _callback);

    }


    private ApiResponse<PayToolsApiModelsJwsOutputModel1pciBookingIINLookupLibraryCardValidationResultpciBookingIINLookupLibraryVersion1040CultureneutralPublicKeyTokennull> performValidationWithHttpInfo(String iin, PayToolsApiModelsPayerBase payToolsApiModelsPayerBase) throws ApiException {
        okhttp3.Call localVarCall = performValidationValidateBeforeCall(iin, payToolsApiModelsPayerBase, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsJwsOutputModel1pciBookingIINLookupLibraryCardValidationResultpciBookingIINLookupLibraryVersion1040CultureneutralPublicKeyTokennull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call performValidationAsync(String iin, PayToolsApiModelsPayerBase payToolsApiModelsPayerBase, final ApiCallback<PayToolsApiModelsJwsOutputModel1pciBookingIINLookupLibraryCardValidationResultpciBookingIINLookupLibraryVersion1040CultureneutralPublicKeyTokennull> _callback) throws ApiException {

        okhttp3.Call localVarCall = performValidationValidateBeforeCall(iin, payToolsApiModelsPayerBase, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsJwsOutputModel1pciBookingIINLookupLibraryCardValidationResultpciBookingIINLookupLibraryVersion1040CultureneutralPublicKeyTokennull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PerformValidationRequestBuilder {
        private final String countryCode;
        private final String iin;
        private String city;
        private String stateProvince;

        private PerformValidationRequestBuilder(String countryCode, String iin) {
            this.countryCode = countryCode;
            this.iin = iin;
        }

        /**
         * Set city
         * @param city City (optional)
         * @return PerformValidationRequestBuilder
         */
        public PerformValidationRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set stateProvince
         * @param stateProvince State or Province (optional)
         * @return PerformValidationRequestBuilder
         */
        public PerformValidationRequestBuilder stateProvince(String stateProvince) {
            this.stateProvince = stateProvince;
            return this;
        }
        
        /**
         * Build call for performValidation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsApiModelsPayerBase payToolsApiModelsPayerBase = buildBodyParams();
            return performValidationCall(iin, payToolsApiModelsPayerBase, _callback);
        }

        private PayToolsApiModelsPayerBase buildBodyParams() {
            PayToolsApiModelsPayerBase payToolsApiModelsPayerBase = new PayToolsApiModelsPayerBase();
            payToolsApiModelsPayerBase.city(this.city);
            payToolsApiModelsPayerBase.stateProvince(this.stateProvince);
            payToolsApiModelsPayerBase.countryCode(this.countryCode);
            return payToolsApiModelsPayerBase;
        }

        /**
         * Execute performValidation request
         * @return PayToolsApiModelsJwsOutputModel1pciBookingIINLookupLibraryCardValidationResultpciBookingIINLookupLibraryVersion1040CultureneutralPublicKeyTokennull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsJwsOutputModel1pciBookingIINLookupLibraryCardValidationResultpciBookingIINLookupLibraryVersion1040CultureneutralPublicKeyTokennull execute() throws ApiException {
            PayToolsApiModelsPayerBase payToolsApiModelsPayerBase = buildBodyParams();
            ApiResponse<PayToolsApiModelsJwsOutputModel1pciBookingIINLookupLibraryCardValidationResultpciBookingIINLookupLibraryVersion1040CultureneutralPublicKeyTokennull> localVarResp = performValidationWithHttpInfo(iin, payToolsApiModelsPayerBase);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute performValidation request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsJwsOutputModel1pciBookingIINLookupLibraryCardValidationResultpciBookingIINLookupLibraryVersion1040CultureneutralPublicKeyTokennull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsJwsOutputModel1pciBookingIINLookupLibraryCardValidationResultpciBookingIINLookupLibraryVersion1040CultureneutralPublicKeyTokennull> executeWithHttpInfo() throws ApiException {
            PayToolsApiModelsPayerBase payToolsApiModelsPayerBase = buildBodyParams();
            return performValidationWithHttpInfo(iin, payToolsApiModelsPayerBase);
        }

        /**
         * Execute performValidation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsJwsOutputModel1pciBookingIINLookupLibraryCardValidationResultpciBookingIINLookupLibraryVersion1040CultureneutralPublicKeyTokennull> _callback) throws ApiException {
            PayToolsApiModelsPayerBase payToolsApiModelsPayerBase = buildBodyParams();
            return performValidationAsync(iin, payToolsApiModelsPayerBase, _callback);
        }
    }

    /**
     * Perform card validation
     * 
     * @param iin Card prefix (required)
     * @param payToolsApiModelsPayerBase Payer details (required)
     * @return PerformValidationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public PerformValidationRequestBuilder performValidation(String countryCode, String iin) throws IllegalArgumentException {
        if (countryCode == null) throw new IllegalArgumentException("\"countryCode\" is required but got null");
            if (countryCode != null && countryCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for countryCode. Length must be greater than or equal to 1.");
            }

        if (iin == null) throw new IllegalArgumentException("\"iin\" is required but got null");
            

        return new PerformValidationRequestBuilder(countryCode, iin);
    }
    private okhttp3.Call performValidation_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CardOperations/opValidate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JwsAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performValidation_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return performValidation_0Call(_callback);

    }


    private ApiResponse<PayToolsBlAuthenticationSignedData> performValidation_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = performValidation_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PayToolsBlAuthenticationSignedData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call performValidation_0Async(final ApiCallback<PayToolsBlAuthenticationSignedData> _callback) throws ApiException {

        okhttp3.Call localVarCall = performValidation_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PayToolsBlAuthenticationSignedData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PerformValidation0RequestBuilder {

        private PerformValidation0RequestBuilder() {
        }

        /**
         * Build call for performValidation_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return performValidation_0Call(_callback);
        }


        /**
         * Execute performValidation_0 request
         * @return PayToolsBlAuthenticationSignedData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsBlAuthenticationSignedData execute() throws ApiException {
            ApiResponse<PayToolsBlAuthenticationSignedData> localVarResp = performValidation_0WithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute performValidation_0 request with HTTP info returned
         * @return ApiResponse&lt;PayToolsBlAuthenticationSignedData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsBlAuthenticationSignedData> executeWithHttpInfo() throws ApiException {
            return performValidation_0WithHttpInfo();
        }

        /**
         * Execute performValidation_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsBlAuthenticationSignedData> _callback) throws ApiException {
            return performValidation_0Async(_callback);
        }
    }

    /**
     * Perform validation of the operation using to signed data
     * 
     * @return PerformValidation0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public PerformValidation0RequestBuilder performValidation_0() throws IllegalArgumentException {
        return new PerformValidation0RequestBuilder();
    }
    private okhttp3.Call tokenizeAndStoreCall(PayToolsApiModelsStringTokenIntputModel payToolsApiModelsStringTokenIntputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsApiModelsStringTokenIntputModel;

        // create path and map variables
        String localVarPath = "/CardOperations/store";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JwsAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenizeAndStoreValidateBeforeCall(PayToolsApiModelsStringTokenIntputModel payToolsApiModelsStringTokenIntputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payToolsApiModelsStringTokenIntputModel' is set
        if (payToolsApiModelsStringTokenIntputModel == null) {
            throw new ApiException("Missing the required parameter 'payToolsApiModelsStringTokenIntputModel' when calling tokenizeAndStore(Async)");
        }

        return tokenizeAndStoreCall(payToolsApiModelsStringTokenIntputModel, _callback);

    }


    private ApiResponse<PayToolsApiModelsJwsOutputModel1PayToolsApiModelsStringTokenMetaDataOutputModelPayToolsApiVersion10715CultureneutralPublicKeyTokennull> tokenizeAndStoreWithHttpInfo(PayToolsApiModelsStringTokenIntputModel payToolsApiModelsStringTokenIntputModel) throws ApiException {
        okhttp3.Call localVarCall = tokenizeAndStoreValidateBeforeCall(payToolsApiModelsStringTokenIntputModel, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsJwsOutputModel1PayToolsApiModelsStringTokenMetaDataOutputModelPayToolsApiVersion10715CultureneutralPublicKeyTokennull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call tokenizeAndStoreAsync(PayToolsApiModelsStringTokenIntputModel payToolsApiModelsStringTokenIntputModel, final ApiCallback<PayToolsApiModelsJwsOutputModel1PayToolsApiModelsStringTokenMetaDataOutputModelPayToolsApiVersion10715CultureneutralPublicKeyTokennull> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenizeAndStoreValidateBeforeCall(payToolsApiModelsStringTokenIntputModel, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsJwsOutputModel1PayToolsApiModelsStringTokenMetaDataOutputModelPayToolsApiVersion10715CultureneutralPublicKeyTokennull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TokenizeAndStoreRequestBuilder {
        private final String payload;

        private TokenizeAndStoreRequestBuilder(String payload) {
            this.payload = payload;
        }

        /**
         * Build call for tokenizeAndStore
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsApiModelsStringTokenIntputModel payToolsApiModelsStringTokenIntputModel = buildBodyParams();
            return tokenizeAndStoreCall(payToolsApiModelsStringTokenIntputModel, _callback);
        }

        private PayToolsApiModelsStringTokenIntputModel buildBodyParams() {
            PayToolsApiModelsStringTokenIntputModel payToolsApiModelsStringTokenIntputModel = new PayToolsApiModelsStringTokenIntputModel();
            payToolsApiModelsStringTokenIntputModel.payload(this.payload);
            return payToolsApiModelsStringTokenIntputModel;
        }

        /**
         * Execute tokenizeAndStore request
         * @return PayToolsApiModelsJwsOutputModel1PayToolsApiModelsStringTokenMetaDataOutputModelPayToolsApiVersion10715CultureneutralPublicKeyTokennull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsJwsOutputModel1PayToolsApiModelsStringTokenMetaDataOutputModelPayToolsApiVersion10715CultureneutralPublicKeyTokennull execute() throws ApiException {
            PayToolsApiModelsStringTokenIntputModel payToolsApiModelsStringTokenIntputModel = buildBodyParams();
            ApiResponse<PayToolsApiModelsJwsOutputModel1PayToolsApiModelsStringTokenMetaDataOutputModelPayToolsApiVersion10715CultureneutralPublicKeyTokennull> localVarResp = tokenizeAndStoreWithHttpInfo(payToolsApiModelsStringTokenIntputModel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute tokenizeAndStore request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsJwsOutputModel1PayToolsApiModelsStringTokenMetaDataOutputModelPayToolsApiVersion10715CultureneutralPublicKeyTokennull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsJwsOutputModel1PayToolsApiModelsStringTokenMetaDataOutputModelPayToolsApiVersion10715CultureneutralPublicKeyTokennull> executeWithHttpInfo() throws ApiException {
            PayToolsApiModelsStringTokenIntputModel payToolsApiModelsStringTokenIntputModel = buildBodyParams();
            return tokenizeAndStoreWithHttpInfo(payToolsApiModelsStringTokenIntputModel);
        }

        /**
         * Execute tokenizeAndStore request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsJwsOutputModel1PayToolsApiModelsStringTokenMetaDataOutputModelPayToolsApiVersion10715CultureneutralPublicKeyTokennull> _callback) throws ApiException {
            PayToolsApiModelsStringTokenIntputModel payToolsApiModelsStringTokenIntputModel = buildBodyParams();
            return tokenizeAndStoreAsync(payToolsApiModelsStringTokenIntputModel, _callback);
        }
    }

    /**
     * Tokenize and store card number
     * 
     * @param payToolsApiModelsStringTokenIntputModel Model with card number to be tokenized (required)
     * @return TokenizeAndStoreRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public TokenizeAndStoreRequestBuilder tokenizeAndStore(String payload) throws IllegalArgumentException {
        if (payload == null) throw new IllegalArgumentException("\"payload\" is required but got null");
            if (payload != null && payload.length() < 1) {
              throw new IllegalArgumentException("Invalid value for payload. Length must be greater than or equal to 1.");
            }

        return new TokenizeAndStoreRequestBuilder(payload);
    }
}
