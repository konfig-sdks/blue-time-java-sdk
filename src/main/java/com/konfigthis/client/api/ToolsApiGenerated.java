/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayToolsApiModelsBrandLookupResult;
import com.konfigthis.client.model.PayToolsApiModelsCardValidationResults;
import com.konfigthis.client.model.PayToolsApiModelsIinData;
import com.konfigthis.client.model.PayToolsApiModelsLuhnCheckResultsWithIinData;
import com.konfigthis.client.model.PayToolsApiModelsPayerBaseWithClientIp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ToolsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ToolsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ToolsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getBrandLookupCall(String iin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Tools/brand";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iin", iin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrandLookupValidateBeforeCall(String iin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iin' is set
        if (iin == null) {
            throw new ApiException("Missing the required parameter 'iin' when calling getBrandLookup(Async)");
        }

        return getBrandLookupCall(iin, _callback);

    }


    private ApiResponse<PayToolsApiModelsBrandLookupResult> getBrandLookupWithHttpInfo(String iin) throws ApiException {
        okhttp3.Call localVarCall = getBrandLookupValidateBeforeCall(iin, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsBrandLookupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBrandLookupAsync(String iin, final ApiCallback<PayToolsApiModelsBrandLookupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrandLookupValidateBeforeCall(iin, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsBrandLookupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBrandLookupRequestBuilder {
        private final String iin;

        private GetBrandLookupRequestBuilder(String iin) {
            this.iin = iin;
        }

        /**
         * Build call for getBrandLookup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBrandLookupCall(iin, _callback);
        }


        /**
         * Execute getBrandLookup request
         * @return PayToolsApiModelsBrandLookupResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsBrandLookupResult execute() throws ApiException {
            ApiResponse<PayToolsApiModelsBrandLookupResult> localVarResp = getBrandLookupWithHttpInfo(iin);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBrandLookup request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsBrandLookupResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsBrandLookupResult> executeWithHttpInfo() throws ApiException {
            return getBrandLookupWithHttpInfo(iin);
        }

        /**
         * Execute getBrandLookup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsBrandLookupResult> _callback) throws ApiException {
            return getBrandLookupAsync(iin, _callback);
        }
    }

    /**
     * Brand Lookup
     * This method allows you to lookup the brand of the card provided.               By providing the card&#39;s BIN / IIN (the first 6 to 11 digits of the card number), we lookup and return the brand of the card (Visa, Mastercard, Amex, etc.).              In addition, we will also provide the URL to the logo of the card brand - you can then reference this image in your card capture form.
     * @param iin Card&#39;s BIN / IIN (the first 6 to 11 digits of the card number) (required)
     * @return GetBrandLookupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public GetBrandLookupRequestBuilder getBrandLookup(String iin) throws IllegalArgumentException {
        if (iin == null) throw new IllegalArgumentException("\"iin\" is required but got null");
            

        return new GetBrandLookupRequestBuilder(iin);
    }
    private okhttp3.Call lookupMetadataCall(String iin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Tools/iin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iin", iin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupMetadataValidateBeforeCall(String iin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iin' is set
        if (iin == null) {
            throw new ApiException("Missing the required parameter 'iin' when calling lookupMetadata(Async)");
        }

        return lookupMetadataCall(iin, _callback);

    }


    private ApiResponse<PayToolsApiModelsIinData> lookupMetadataWithHttpInfo(String iin) throws ApiException {
        okhttp3.Call localVarCall = lookupMetadataValidateBeforeCall(iin, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsIinData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupMetadataAsync(String iin, final ApiCallback<PayToolsApiModelsIinData> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupMetadataValidateBeforeCall(iin, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsIinData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LookupMetadataRequestBuilder {
        private final String iin;

        private LookupMetadataRequestBuilder(String iin) {
            this.iin = iin;
        }

        /**
         * Build call for lookupMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupMetadataCall(iin, _callback);
        }


        /**
         * Execute lookupMetadata request
         * @return PayToolsApiModelsIinData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsIinData execute() throws ApiException {
            ApiResponse<PayToolsApiModelsIinData> localVarResp = lookupMetadataWithHttpInfo(iin);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lookupMetadata request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsIinData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsIinData> executeWithHttpInfo() throws ApiException {
            return lookupMetadataWithHttpInfo(iin);
        }

        /**
         * Execute lookupMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsIinData> _callback) throws ApiException {
            return lookupMetadataAsync(iin, _callback);
        }
    }

    /**
     * Metadata Lookup
     * This method allows you to lookup the metadata of the card provided.   By providing the card&#39;s BIN / IIN (the first 6 to 11 digits of the card number), we lookup and return the full metadata available for this card./r/nI  In addition, we will also provide the URL to the logo of the card brand - you can then reference this image in your card capture form.
     * @param iin Card&#39;s BIN / IIN (the first 6 to 11 digits of the card number) (required)
     * @return LookupMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public LookupMetadataRequestBuilder lookupMetadata(String iin) throws IllegalArgumentException {
        if (iin == null) throw new IllegalArgumentException("\"iin\" is required but got null");
            

        return new LookupMetadataRequestBuilder(iin);
    }
    private okhttp3.Call validateCardDetailsCall(String iin, PayToolsApiModelsPayerBaseWithClientIp payToolsApiModelsPayerBaseWithClientIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsApiModelsPayerBaseWithClientIp;

        // create path and map variables
        String localVarPath = "/Tools/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iin", iin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateCardDetailsValidateBeforeCall(String iin, PayToolsApiModelsPayerBaseWithClientIp payToolsApiModelsPayerBaseWithClientIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iin' is set
        if (iin == null) {
            throw new ApiException("Missing the required parameter 'iin' when calling validateCardDetails(Async)");
        }

        // verify the required parameter 'payToolsApiModelsPayerBaseWithClientIp' is set
        if (payToolsApiModelsPayerBaseWithClientIp == null) {
            throw new ApiException("Missing the required parameter 'payToolsApiModelsPayerBaseWithClientIp' when calling validateCardDetails(Async)");
        }

        return validateCardDetailsCall(iin, payToolsApiModelsPayerBaseWithClientIp, _callback);

    }


    private ApiResponse<PayToolsApiModelsCardValidationResults> validateCardDetailsWithHttpInfo(String iin, PayToolsApiModelsPayerBaseWithClientIp payToolsApiModelsPayerBaseWithClientIp) throws ApiException {
        okhttp3.Call localVarCall = validateCardDetailsValidateBeforeCall(iin, payToolsApiModelsPayerBaseWithClientIp, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsCardValidationResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateCardDetailsAsync(String iin, PayToolsApiModelsPayerBaseWithClientIp payToolsApiModelsPayerBaseWithClientIp, final ApiCallback<PayToolsApiModelsCardValidationResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateCardDetailsValidateBeforeCall(iin, payToolsApiModelsPayerBaseWithClientIp, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsCardValidationResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ValidateCardDetailsRequestBuilder {
        private final String clientIPAddress;
        private final String countryCode;
        private final String iin;
        private String city;
        private String stateProvince;

        private ValidateCardDetailsRequestBuilder(String clientIPAddress, String countryCode, String iin) {
            this.clientIPAddress = clientIPAddress;
            this.countryCode = countryCode;
            this.iin = iin;
        }

        /**
         * Set city
         * @param city City (optional)
         * @return ValidateCardDetailsRequestBuilder
         */
        public ValidateCardDetailsRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set stateProvince
         * @param stateProvince State or Province (optional)
         * @return ValidateCardDetailsRequestBuilder
         */
        public ValidateCardDetailsRequestBuilder stateProvince(String stateProvince) {
            this.stateProvince = stateProvince;
            return this;
        }
        
        /**
         * Build call for validateCardDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsApiModelsPayerBaseWithClientIp payToolsApiModelsPayerBaseWithClientIp = buildBodyParams();
            return validateCardDetailsCall(iin, payToolsApiModelsPayerBaseWithClientIp, _callback);
        }

        private PayToolsApiModelsPayerBaseWithClientIp buildBodyParams() {
            PayToolsApiModelsPayerBaseWithClientIp payToolsApiModelsPayerBaseWithClientIp = new PayToolsApiModelsPayerBaseWithClientIp();
            payToolsApiModelsPayerBaseWithClientIp.clientIPAddress(this.clientIPAddress);
            payToolsApiModelsPayerBaseWithClientIp.city(this.city);
            payToolsApiModelsPayerBaseWithClientIp.stateProvince(this.stateProvince);
            payToolsApiModelsPayerBaseWithClientIp.countryCode(this.countryCode);
            return payToolsApiModelsPayerBaseWithClientIp;
        }

        /**
         * Execute validateCardDetails request
         * @return PayToolsApiModelsCardValidationResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsCardValidationResults execute() throws ApiException {
            PayToolsApiModelsPayerBaseWithClientIp payToolsApiModelsPayerBaseWithClientIp = buildBodyParams();
            ApiResponse<PayToolsApiModelsCardValidationResults> localVarResp = validateCardDetailsWithHttpInfo(iin, payToolsApiModelsPayerBaseWithClientIp);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute validateCardDetails request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsCardValidationResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsCardValidationResults> executeWithHttpInfo() throws ApiException {
            PayToolsApiModelsPayerBaseWithClientIp payToolsApiModelsPayerBaseWithClientIp = buildBodyParams();
            return validateCardDetailsWithHttpInfo(iin, payToolsApiModelsPayerBaseWithClientIp);
        }

        /**
         * Execute validateCardDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsCardValidationResults> _callback) throws ApiException {
            PayToolsApiModelsPayerBaseWithClientIp payToolsApiModelsPayerBaseWithClientIp = buildBodyParams();
            return validateCardDetailsAsync(iin, payToolsApiModelsPayerBaseWithClientIp, _callback);
        }
    }

    /**
     * Card Validation
     * This method allows you to validate the card details against the card&#39;s meta data. By providing the billing address and IP address of the card owner, we validate those against the metadata of the card and provide a risk assessment for this transaction.  All you would need is the card&#39;s BIN / IIN (the first 6 to 11 digits of the card number), the billing address and IP address.  The response of this method will include the full metadata information for this BIN including the risk assessment.
     * @param iin Card&#39;s BIN / IIN (the first 6 to 11 digits of the card number) (required)
     * @param payToolsApiModelsPayerBaseWithClientIp payer details (required)
     * @return ValidateCardDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public ValidateCardDetailsRequestBuilder validateCardDetails(String clientIPAddress, String countryCode, String iin) throws IllegalArgumentException {
        if (clientIPAddress == null) throw new IllegalArgumentException("\"clientIPAddress\" is required but got null");
            if (clientIPAddress != null && clientIPAddress.length() < 1) {
              throw new IllegalArgumentException("Invalid value for clientIPAddress. Length must be greater than or equal to 1.");
            }

        if (countryCode == null) throw new IllegalArgumentException("\"countryCode\" is required but got null");
            if (countryCode != null && countryCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for countryCode. Length must be greater than or equal to 1.");
            }

        if (iin == null) throw new IllegalArgumentException("\"iin\" is required but got null");
            

        return new ValidateCardDetailsRequestBuilder(clientIPAddress, countryCode, iin);
    }
    private okhttp3.Call validateLuhnCardCall(String number, Boolean metaData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Tools/luhn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (metaData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metaData", metaData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateLuhnCardValidateBeforeCall(String number, Boolean metaData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling validateLuhnCard(Async)");
        }

        return validateLuhnCardCall(number, metaData, _callback);

    }


    private ApiResponse<PayToolsApiModelsLuhnCheckResultsWithIinData> validateLuhnCardWithHttpInfo(String number, Boolean metaData) throws ApiException {
        okhttp3.Call localVarCall = validateLuhnCardValidateBeforeCall(number, metaData, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsLuhnCheckResultsWithIinData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateLuhnCardAsync(String number, Boolean metaData, final ApiCallback<PayToolsApiModelsLuhnCheckResultsWithIinData> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateLuhnCardValidateBeforeCall(number, metaData, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsLuhnCheckResultsWithIinData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ValidateLuhnCardRequestBuilder {
        private final String number;
        private Boolean metaData;

        private ValidateLuhnCardRequestBuilder(String number) {
            this.number = number;
        }

        /**
         * Set metaData
         * @param metaData An optional indicator to specify whether the card metadata should be included in the response. (optional, default to false)
         * @return ValidateLuhnCardRequestBuilder
         */
        public ValidateLuhnCardRequestBuilder metaData(Boolean metaData) {
            this.metaData = metaData;
            return this;
        }
        
        /**
         * Build call for validateLuhnCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return validateLuhnCardCall(number, metaData, _callback);
        }


        /**
         * Execute validateLuhnCard request
         * @return PayToolsApiModelsLuhnCheckResultsWithIinData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsLuhnCheckResultsWithIinData execute() throws ApiException {
            ApiResponse<PayToolsApiModelsLuhnCheckResultsWithIinData> localVarResp = validateLuhnCardWithHttpInfo(number, metaData);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute validateLuhnCard request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsLuhnCheckResultsWithIinData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsLuhnCheckResultsWithIinData> executeWithHttpInfo() throws ApiException {
            return validateLuhnCardWithHttpInfo(number, metaData);
        }

        /**
         * Execute validateLuhnCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsLuhnCheckResultsWithIinData> _callback) throws ApiException {
            return validateLuhnCardAsync(number, metaData, _callback);
        }
    }

    /**
     * Luhn Algorithm Validation
     * This method allows you to provide the card number and validate it against the&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Luhn_algorithm\&quot; target&#x3D;\&quot;_blank\&quot;&gt; Luhn algorithm&lt;/a&gt;.In addition, you can choose to receive the card&#39;s metadata in the response.
     * @param number The full card number to be validated. (required)
     * @return ValidateLuhnCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public ValidateLuhnCardRequestBuilder validateLuhnCard(String number) throws IllegalArgumentException {
        if (number == null) throw new IllegalArgumentException("\"number\" is required but got null");
            

        return new ValidateLuhnCardRequestBuilder(number);
    }
}
