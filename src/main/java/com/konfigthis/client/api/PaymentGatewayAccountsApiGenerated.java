/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayToolsApiModelsPaymentGatewayAccountBriefOutputModel;
import com.konfigthis.client.model.PayToolsApiModelsPaymentGatewayAccountFullOutputModel;
import com.konfigthis.client.model.PayToolsApiModelsPaymentGatewayAccountInputModel;
import com.konfigthis.client.model.SystemCollectionsGenericKeyValuePair2SystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798eSystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798e;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaymentGatewayAccountsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentGatewayAccountsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentGatewayAccountsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addOrReplaceCall(String name, PayToolsApiModelsPaymentGatewayAccountInputModel payToolsApiModelsPaymentGatewayAccountInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsApiModelsPaymentGatewayAccountInputModel;

        // create path and map variables
        String localVarPath = "/PaymentGatewayAccounts/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrReplaceValidateBeforeCall(String name, PayToolsApiModelsPaymentGatewayAccountInputModel payToolsApiModelsPaymentGatewayAccountInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling addOrReplace(Async)");
        }

        // verify the required parameter 'payToolsApiModelsPaymentGatewayAccountInputModel' is set
        if (payToolsApiModelsPaymentGatewayAccountInputModel == null) {
            throw new ApiException("Missing the required parameter 'payToolsApiModelsPaymentGatewayAccountInputModel' when calling addOrReplace(Async)");
        }

        return addOrReplaceCall(name, payToolsApiModelsPaymentGatewayAccountInputModel, _callback);

    }


    private ApiResponse<PayToolsApiModelsPaymentGatewayAccountFullOutputModel> addOrReplaceWithHttpInfo(String name, PayToolsApiModelsPaymentGatewayAccountInputModel payToolsApiModelsPaymentGatewayAccountInputModel) throws ApiException {
        okhttp3.Call localVarCall = addOrReplaceValidateBeforeCall(name, payToolsApiModelsPaymentGatewayAccountInputModel, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsPaymentGatewayAccountFullOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addOrReplaceAsync(String name, PayToolsApiModelsPaymentGatewayAccountInputModel payToolsApiModelsPaymentGatewayAccountInputModel, final ApiCallback<PayToolsApiModelsPaymentGatewayAccountFullOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrReplaceValidateBeforeCall(name, payToolsApiModelsPaymentGatewayAccountInputModel, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsPaymentGatewayAccountFullOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddOrReplaceRequestBuilder {
        private final String name;
        private String paymentGatewayName;
        private List<SystemCollectionsGenericKeyValuePair2SystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798eSystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798e> credentials;

        private AddOrReplaceRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set paymentGatewayName
         * @param paymentGatewayName Unique name of the Payment Gateway the account information relates to. (optional)
         * @return AddOrReplaceRequestBuilder
         */
        public AddOrReplaceRequestBuilder paymentGatewayName(String paymentGatewayName) {
            this.paymentGatewayName = paymentGatewayName;
            return this;
        }
        
        /**
         * Set credentials
         * @param credentials A list of key-value pairs that represents your credentials within the Payment gateway.   Each key should represent a parameter listed in the \\\&quot;CredentialsNames\\\&quot; element of the response from the list all payment gateways method at &#x60;[GET] /paymentGateway&#x60;  Example:  \\\&quot;Credentials\\\&quot;: [     {         \\\&quot;Key\\\&quot;: \\\&quot;PrivateKey\\\&quot;,         \\\&quot;Value\\\&quot;: \\\&quot;VBtt666M/G098098vgdewvk0Mc-GH\\\&quot;     }  ] (optional)
         * @return AddOrReplaceRequestBuilder
         */
        public AddOrReplaceRequestBuilder credentials(List<SystemCollectionsGenericKeyValuePair2SystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798eSystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798e> credentials) {
            this.credentials = credentials;
            return this;
        }
        
        /**
         * Build call for addOrReplace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsApiModelsPaymentGatewayAccountInputModel payToolsApiModelsPaymentGatewayAccountInputModel = buildBodyParams();
            return addOrReplaceCall(name, payToolsApiModelsPaymentGatewayAccountInputModel, _callback);
        }

        private PayToolsApiModelsPaymentGatewayAccountInputModel buildBodyParams() {
            PayToolsApiModelsPaymentGatewayAccountInputModel payToolsApiModelsPaymentGatewayAccountInputModel = new PayToolsApiModelsPaymentGatewayAccountInputModel();
            payToolsApiModelsPaymentGatewayAccountInputModel.paymentGatewayName(this.paymentGatewayName);
            payToolsApiModelsPaymentGatewayAccountInputModel.credentials(this.credentials);
            return payToolsApiModelsPaymentGatewayAccountInputModel;
        }

        /**
         * Execute addOrReplace request
         * @return PayToolsApiModelsPaymentGatewayAccountFullOutputModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsPaymentGatewayAccountFullOutputModel execute() throws ApiException {
            PayToolsApiModelsPaymentGatewayAccountInputModel payToolsApiModelsPaymentGatewayAccountInputModel = buildBodyParams();
            ApiResponse<PayToolsApiModelsPaymentGatewayAccountFullOutputModel> localVarResp = addOrReplaceWithHttpInfo(name, payToolsApiModelsPaymentGatewayAccountInputModel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addOrReplace request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsPaymentGatewayAccountFullOutputModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsPaymentGatewayAccountFullOutputModel> executeWithHttpInfo() throws ApiException {
            PayToolsApiModelsPaymentGatewayAccountInputModel payToolsApiModelsPaymentGatewayAccountInputModel = buildBodyParams();
            return addOrReplaceWithHttpInfo(name, payToolsApiModelsPaymentGatewayAccountInputModel);
        }

        /**
         * Execute addOrReplace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsPaymentGatewayAccountFullOutputModel> _callback) throws ApiException {
            PayToolsApiModelsPaymentGatewayAccountInputModel payToolsApiModelsPaymentGatewayAccountInputModel = buildBodyParams();
            return addOrReplaceAsync(name, payToolsApiModelsPaymentGatewayAccountInputModel, _callback);
        }
    }

    /**
     * Add or Replace a Payment Gateway Account
     * A Payment Gateway Account is the set of information necessary for connecting to a specific payment gateway through our system.  This method allows you to add a new stored Payment Gateway Account in the system or to replace an existing one.
     * @param name A unique name of this Payment Gateway Account (required)
     * @param payToolsApiModelsPaymentGatewayAccountInputModel Payment gateway account data (required)
     * @return AddOrReplaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public AddOrReplaceRequestBuilder addOrReplace(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new AddOrReplaceRequestBuilder(name);
    }
    private okhttp3.Call getAllCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PaymentGatewayAccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllCall(_callback);

    }


    private ApiResponse<List<PayToolsApiModelsPaymentGatewayAccountBriefOutputModel>> getAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PayToolsApiModelsPaymentGatewayAccountBriefOutputModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(final ApiCallback<List<PayToolsApiModelsPaymentGatewayAccountBriefOutputModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PayToolsApiModelsPaymentGatewayAccountBriefOutputModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {

        private GetAllRequestBuilder() {
        }

        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(_callback);
        }


        /**
         * Execute getAll request
         * @return List&lt;PayToolsApiModelsPaymentGatewayAccountBriefOutputModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public List<PayToolsApiModelsPaymentGatewayAccountBriefOutputModel> execute() throws ApiException {
            ApiResponse<List<PayToolsApiModelsPaymentGatewayAccountBriefOutputModel>> localVarResp = getAllWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PayToolsApiModelsPaymentGatewayAccountBriefOutputModel&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PayToolsApiModelsPaymentGatewayAccountBriefOutputModel>> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo();
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PayToolsApiModelsPaymentGatewayAccountBriefOutputModel>> _callback) throws ApiException {
            return getAllAsync(_callback);
        }
    }

    /**
     * List Payment Gateway Accounts
     * This method allows you to list all stored Payment Gateway Accounts in the system
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getInfoCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PaymentGatewayAccounts/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getInfo(Async)");
        }

        return getInfoCall(name, _callback);

    }


    private ApiResponse<PayToolsApiModelsPaymentGatewayAccountFullOutputModel> getInfoWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsPaymentGatewayAccountFullOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfoAsync(String name, final ApiCallback<PayToolsApiModelsPaymentGatewayAccountFullOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsPaymentGatewayAccountFullOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfoRequestBuilder {
        private final String name;

        private GetInfoRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for getInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfoCall(name, _callback);
        }


        /**
         * Execute getInfo request
         * @return PayToolsApiModelsPaymentGatewayAccountFullOutputModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsPaymentGatewayAccountFullOutputModel execute() throws ApiException {
            ApiResponse<PayToolsApiModelsPaymentGatewayAccountFullOutputModel> localVarResp = getInfoWithHttpInfo(name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsPaymentGatewayAccountFullOutputModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsPaymentGatewayAccountFullOutputModel> executeWithHttpInfo() throws ApiException {
            return getInfoWithHttpInfo(name);
        }

        /**
         * Execute getInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsPaymentGatewayAccountFullOutputModel> _callback) throws ApiException {
            return getInfoAsync(name, _callback);
        }
    }

    /**
     * Retrieve Payment Gateway Account
     * A Payment Gateway Account is the set of information necessary for connecting to a specific payment gateway through our system.  This method allows you to retrieve the information set on a particular payment gateway account. You can then update it using the &#x60;[PUT] PaymentGatewayAccounts/{name}&#x60; method
     * @param name A unique name of this Payment Gateway Account (required)
     * @return GetInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public GetInfoRequestBuilder getInfo(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new GetInfoRequestBuilder(name);
    }
    private okhttp3.Call removeAccountCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/PaymentGatewayAccounts/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAccountValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling removeAccount(Async)");
        }

        return removeAccountCall(name, _callback);

    }


    private ApiResponse<Void> removeAccountWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = removeAccountValidateBeforeCall(name, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAccountAsync(String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAccountValidateBeforeCall(name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveAccountRequestBuilder {
        private final String name;

        private RemoveAccountRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for removeAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeAccountCall(name, _callback);
        }


        /**
         * Execute removeAccount request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeAccountWithHttpInfo(name);
        }

        /**
         * Execute removeAccount request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeAccountWithHttpInfo(name);
        }

        /**
         * Execute removeAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeAccountAsync(name, _callback);
        }
    }

    /**
     * Delete a Payment Gateway Account
     * This method allows you to delete a stored Payment Gateway Account in the system.
     * @param name A unique name of this Payment Gateway Account (required)
     * @return RemoveAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAccountRequestBuilder removeAccount(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new RemoveAccountRequestBuilder(name);
    }
}
