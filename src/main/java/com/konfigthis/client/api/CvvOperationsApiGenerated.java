/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayToolsApiModelsCvvOpsChargeRequest;
import com.konfigthis.client.model.PayToolsApiModelsJwsOutputModel;
import com.konfigthis.client.model.PayToolsApiModelsJwsOutputModel1PayToolsBlAuthenticationChargeCardSignedModelPayToolsBlVersion1000CultureneutralPublicKeyTokennull;
import com.konfigthis.client.model.PayToolsBlAuthenticationChargePresetData;
import com.konfigthis.client.model.PayToolsBlAuthenticationCvvSignedDataModel;
import com.konfigthis.client.model.PayToolsSharedModelsCardStoredCard;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CvvOperationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CvvOperationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CvvOperationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getTokenCvvOperationCall(Integer ttl, PayToolsBlAuthenticationCvvSignedDataModel payToolsBlAuthenticationCvvSignedDataModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsBlAuthenticationCvvSignedDataModel;

        // create path and map variables
        String localVarPath = "/CvvOperations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenCvvOperationValidateBeforeCall(Integer ttl, PayToolsBlAuthenticationCvvSignedDataModel payToolsBlAuthenticationCvvSignedDataModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ttl' is set
        if (ttl == null) {
            throw new ApiException("Missing the required parameter 'ttl' when calling getTokenCvvOperation(Async)");
        }

        return getTokenCvvOperationCall(ttl, payToolsBlAuthenticationCvvSignedDataModel, _callback);

    }


    private ApiResponse<PayToolsApiModelsJwsOutputModel> getTokenCvvOperationWithHttpInfo(Integer ttl, PayToolsBlAuthenticationCvvSignedDataModel payToolsBlAuthenticationCvvSignedDataModel) throws ApiException {
        okhttp3.Call localVarCall = getTokenCvvOperationValidateBeforeCall(ttl, payToolsBlAuthenticationCvvSignedDataModel, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsJwsOutputModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTokenCvvOperationAsync(Integer ttl, PayToolsBlAuthenticationCvvSignedDataModel payToolsBlAuthenticationCvvSignedDataModel, final ApiCallback<PayToolsApiModelsJwsOutputModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenCvvOperationValidateBeforeCall(ttl, payToolsBlAuthenticationCvvSignedDataModel, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsJwsOutputModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTokenCvvOperationRequestBuilder {
        private final Integer ttl;
        private PayToolsSharedModelsCardStoredCard card;
        private PayToolsBlAuthenticationChargePresetData crgD;

        private GetTokenCvvOperationRequestBuilder(Integer ttl) {
            this.ttl = ttl;
        }

        /**
         * Set card
         * @param card  (optional)
         * @return GetTokenCvvOperationRequestBuilder
         */
        public GetTokenCvvOperationRequestBuilder card(PayToolsSharedModelsCardStoredCard card) {
            this.card = card;
            return this;
        }
        
        /**
         * Set crgD
         * @param crgD  (optional)
         * @return GetTokenCvvOperationRequestBuilder
         */
        public GetTokenCvvOperationRequestBuilder crgD(PayToolsBlAuthenticationChargePresetData crgD) {
            this.crgD = crgD;
            return this;
        }
        
        /**
         * Build call for getTokenCvvOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsBlAuthenticationCvvSignedDataModel payToolsBlAuthenticationCvvSignedDataModel = buildBodyParams();
            return getTokenCvvOperationCall(ttl, payToolsBlAuthenticationCvvSignedDataModel, _callback);
        }

        private PayToolsBlAuthenticationCvvSignedDataModel buildBodyParams() {
            PayToolsBlAuthenticationCvvSignedDataModel payToolsBlAuthenticationCvvSignedDataModel = new PayToolsBlAuthenticationCvvSignedDataModel();
            payToolsBlAuthenticationCvvSignedDataModel.card(this.card);
            payToolsBlAuthenticationCvvSignedDataModel.crgD(this.crgD);
            return payToolsBlAuthenticationCvvSignedDataModel;
        }

        /**
         * Execute getTokenCvvOperation request
         * @return PayToolsApiModelsJwsOutputModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsJwsOutputModel execute() throws ApiException {
            PayToolsBlAuthenticationCvvSignedDataModel payToolsBlAuthenticationCvvSignedDataModel = buildBodyParams();
            ApiResponse<PayToolsApiModelsJwsOutputModel> localVarResp = getTokenCvvOperationWithHttpInfo(ttl, payToolsBlAuthenticationCvvSignedDataModel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTokenCvvOperation request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsJwsOutputModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsJwsOutputModel> executeWithHttpInfo() throws ApiException {
            PayToolsBlAuthenticationCvvSignedDataModel payToolsBlAuthenticationCvvSignedDataModel = buildBodyParams();
            return getTokenCvvOperationWithHttpInfo(ttl, payToolsBlAuthenticationCvvSignedDataModel);
        }

        /**
         * Execute getTokenCvvOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsJwsOutputModel> _callback) throws ApiException {
            PayToolsBlAuthenticationCvvSignedDataModel payToolsBlAuthenticationCvvSignedDataModel = buildBodyParams();
            return getTokenCvvOperationAsync(ttl, payToolsBlAuthenticationCvvSignedDataModel, _callback);
        }
    }

    /**
     * Get a token to start a CVV operation
     * 
     * @param ttl Time to live for the returned token (required)
     * @return GetTokenCvvOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authenticated </td><td>  -  </td></tr>
     </table>
     */
    public GetTokenCvvOperationRequestBuilder getTokenCvvOperation(Integer ttl) throws IllegalArgumentException {
        if (ttl == null) throw new IllegalArgumentException("\"ttl\" is required but got null");
        return new GetTokenCvvOperationRequestBuilder(ttl);
    }
    private okhttp3.Call performUniversalPaymentGatewayChargeCall(PayToolsApiModelsCvvOpsChargeRequest payToolsApiModelsCvvOpsChargeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payToolsApiModelsCvvOpsChargeRequest;

        // create path and map variables
        String localVarPath = "/CvvOperations/charge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performUniversalPaymentGatewayChargeValidateBeforeCall(PayToolsApiModelsCvvOpsChargeRequest payToolsApiModelsCvvOpsChargeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payToolsApiModelsCvvOpsChargeRequest' is set
        if (payToolsApiModelsCvvOpsChargeRequest == null) {
            throw new ApiException("Missing the required parameter 'payToolsApiModelsCvvOpsChargeRequest' when calling performUniversalPaymentGatewayCharge(Async)");
        }

        return performUniversalPaymentGatewayChargeCall(payToolsApiModelsCvvOpsChargeRequest, _callback);

    }


    private ApiResponse<PayToolsApiModelsJwsOutputModel1PayToolsBlAuthenticationChargeCardSignedModelPayToolsBlVersion1000CultureneutralPublicKeyTokennull> performUniversalPaymentGatewayChargeWithHttpInfo(PayToolsApiModelsCvvOpsChargeRequest payToolsApiModelsCvvOpsChargeRequest) throws ApiException {
        okhttp3.Call localVarCall = performUniversalPaymentGatewayChargeValidateBeforeCall(payToolsApiModelsCvvOpsChargeRequest, null);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsJwsOutputModel1PayToolsBlAuthenticationChargeCardSignedModelPayToolsBlVersion1000CultureneutralPublicKeyTokennull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call performUniversalPaymentGatewayChargeAsync(PayToolsApiModelsCvvOpsChargeRequest payToolsApiModelsCvvOpsChargeRequest, final ApiCallback<PayToolsApiModelsJwsOutputModel1PayToolsBlAuthenticationChargeCardSignedModelPayToolsBlVersion1000CultureneutralPublicKeyTokennull> _callback) throws ApiException {

        okhttp3.Call localVarCall = performUniversalPaymentGatewayChargeValidateBeforeCall(payToolsApiModelsCvvOpsChargeRequest, _callback);
        Type localVarReturnType = new TypeToken<PayToolsApiModelsJwsOutputModel1PayToolsBlAuthenticationChargeCardSignedModelPayToolsBlVersion1000CultureneutralPublicKeyTokennull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PerformUniversalPaymentGatewayChargeRequestBuilder {
        private final String cvv;

        private PerformUniversalPaymentGatewayChargeRequestBuilder(String cvv) {
            this.cvv = cvv;
        }

        /**
         * Build call for performUniversalPaymentGatewayCharge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayToolsApiModelsCvvOpsChargeRequest payToolsApiModelsCvvOpsChargeRequest = buildBodyParams();
            return performUniversalPaymentGatewayChargeCall(payToolsApiModelsCvvOpsChargeRequest, _callback);
        }

        private PayToolsApiModelsCvvOpsChargeRequest buildBodyParams() {
            PayToolsApiModelsCvvOpsChargeRequest payToolsApiModelsCvvOpsChargeRequest = new PayToolsApiModelsCvvOpsChargeRequest();
            payToolsApiModelsCvvOpsChargeRequest.cvv(this.cvv);
            return payToolsApiModelsCvvOpsChargeRequest;
        }

        /**
         * Execute performUniversalPaymentGatewayCharge request
         * @return PayToolsApiModelsJwsOutputModel1PayToolsBlAuthenticationChargeCardSignedModelPayToolsBlVersion1000CultureneutralPublicKeyTokennull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsApiModelsJwsOutputModel1PayToolsBlAuthenticationChargeCardSignedModelPayToolsBlVersion1000CultureneutralPublicKeyTokennull execute() throws ApiException {
            PayToolsApiModelsCvvOpsChargeRequest payToolsApiModelsCvvOpsChargeRequest = buildBodyParams();
            ApiResponse<PayToolsApiModelsJwsOutputModel1PayToolsBlAuthenticationChargeCardSignedModelPayToolsBlVersion1000CultureneutralPublicKeyTokennull> localVarResp = performUniversalPaymentGatewayChargeWithHttpInfo(payToolsApiModelsCvvOpsChargeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute performUniversalPaymentGatewayCharge request with HTTP info returned
         * @return ApiResponse&lt;PayToolsApiModelsJwsOutputModel1PayToolsBlAuthenticationChargeCardSignedModelPayToolsBlVersion1000CultureneutralPublicKeyTokennull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsApiModelsJwsOutputModel1PayToolsBlAuthenticationChargeCardSignedModelPayToolsBlVersion1000CultureneutralPublicKeyTokennull> executeWithHttpInfo() throws ApiException {
            PayToolsApiModelsCvvOpsChargeRequest payToolsApiModelsCvvOpsChargeRequest = buildBodyParams();
            return performUniversalPaymentGatewayChargeWithHttpInfo(payToolsApiModelsCvvOpsChargeRequest);
        }

        /**
         * Execute performUniversalPaymentGatewayCharge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsApiModelsJwsOutputModel1PayToolsBlAuthenticationChargeCardSignedModelPayToolsBlVersion1000CultureneutralPublicKeyTokennull> _callback) throws ApiException {
            PayToolsApiModelsCvvOpsChargeRequest payToolsApiModelsCvvOpsChargeRequest = buildBodyParams();
            return performUniversalPaymentGatewayChargeAsync(payToolsApiModelsCvvOpsChargeRequest, _callback);
        }
    }

    /**
     * Perform Univesal payment gateway charge operation
     * 
     * @param payToolsApiModelsCvvOpsChargeRequest  (required)
     * @return PerformUniversalPaymentGatewayChargeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PerformUniversalPaymentGatewayChargeRequestBuilder performUniversalPaymentGatewayCharge(String cvv) throws IllegalArgumentException {
        if (cvv == null) throw new IllegalArgumentException("\"cvv\" is required but got null");
            if (cvv != null && cvv.length() < 1) {
              throw new IllegalArgumentException("Invalid value for cvv. Length must be greater than or equal to 1.");
            }

        return new PerformUniversalPaymentGatewayChargeRequestBuilder(cvv);
    }
    private okhttp3.Call validateOperationCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CvvOperations/opValidate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateOperationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return validateOperationCall(_callback);

    }


    private ApiResponse<PayToolsBlAuthenticationCvvSignedDataModel> validateOperationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = validateOperationValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PayToolsBlAuthenticationCvvSignedDataModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateOperationAsync(final ApiCallback<PayToolsBlAuthenticationCvvSignedDataModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateOperationValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PayToolsBlAuthenticationCvvSignedDataModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ValidateOperationRequestBuilder {

        private ValidateOperationRequestBuilder() {
        }

        /**
         * Build call for validateOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return validateOperationCall(_callback);
        }


        /**
         * Execute validateOperation request
         * @return PayToolsBlAuthenticationCvvSignedDataModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PayToolsBlAuthenticationCvvSignedDataModel execute() throws ApiException {
            ApiResponse<PayToolsBlAuthenticationCvvSignedDataModel> localVarResp = validateOperationWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute validateOperation request with HTTP info returned
         * @return ApiResponse&lt;PayToolsBlAuthenticationCvvSignedDataModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayToolsBlAuthenticationCvvSignedDataModel> executeWithHttpInfo() throws ApiException {
            return validateOperationWithHttpInfo();
        }

        /**
         * Execute validateOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayToolsBlAuthenticationCvvSignedDataModel> _callback) throws ApiException {
            return validateOperationAsync(_callback);
        }
    }

    /**
     * Perform validation of the operation using signed data from charge operation
     * 
     * @return ValidateOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ValidateOperationRequestBuilder validateOperation() throws IllegalArgumentException {
        return new ValidateOperationRequestBuilder();
    }
}
