/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PaymentsCardTypes;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A brand for 3DS authentication
 */
@ApiModel(description = "A brand for 3DS authentication")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayToolsBlAuthenticationThreeDsBrand {
  public static final String SERIALIZED_NAME_BRD = "brd";
  @SerializedName(SERIALIZED_NAME_BRD)
  private PaymentsCardTypes brd;

  public static final String SERIALIZED_NAME_BIN = "bin";
  @SerializedName(SERIALIZED_NAME_BIN)
  private String bin;

  public static final String SERIALIZED_NAME_MID = "mid";
  @SerializedName(SERIALIZED_NAME_MID)
  private String mid;

  public static final String SERIALIZED_NAME_MCC = "mcc";
  @SerializedName(SERIALIZED_NAME_MCC)
  private String mcc;

  public PayToolsBlAuthenticationThreeDsBrand() {
  }

  public PayToolsBlAuthenticationThreeDsBrand brd(PaymentsCardTypes brd) {
    
    
    
    
    this.brd = brd;
    return this;
  }

   /**
   * Get brd
   * @return brd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentsCardTypes getBrd() {
    return brd;
  }


  public void setBrd(PaymentsCardTypes brd) {
    
    
    
    this.brd = brd;
  }


  public PayToolsBlAuthenticationThreeDsBrand bin(String bin) {
    
    
    if (bin != null && bin.length() < 1) {
      throw new IllegalArgumentException("Invalid value for bin. Length must be greater than or equal to 1.");
    }
    
    this.bin = bin;
    return this;
  }

   /**
   * Brand&#39;s Bin
   * @return bin
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Brand's Bin")

  public String getBin() {
    return bin;
  }


  public void setBin(String bin) {
    
    
    if (bin != null && bin.length() < 1) {
      throw new IllegalArgumentException("Invalid value for bin. Length must be greater than or equal to 1.");
    }
    this.bin = bin;
  }


  public PayToolsBlAuthenticationThreeDsBrand mid(String mid) {
    
    
    if (mid != null && mid.length() < 1) {
      throw new IllegalArgumentException("Invalid value for mid. Length must be greater than or equal to 1.");
    }
    
    this.mid = mid;
    return this;
  }

   /**
   * Merchant Id
   * @return mid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Merchant Id")

  public String getMid() {
    return mid;
  }


  public void setMid(String mid) {
    
    
    if (mid != null && mid.length() < 1) {
      throw new IllegalArgumentException("Invalid value for mid. Length must be greater than or equal to 1.");
    }
    this.mid = mid;
  }


  public PayToolsBlAuthenticationThreeDsBrand mcc(String mcc) {
    
    
    if (mcc != null && mcc.length() < 1) {
      throw new IllegalArgumentException("Invalid value for mcc. Length must be greater than or equal to 1.");
    }
    
    this.mcc = mcc;
    return this;
  }

   /**
   * Brand&#39;s MCC
   * @return mcc
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Brand's MCC")

  public String getMcc() {
    return mcc;
  }


  public void setMcc(String mcc) {
    
    
    if (mcc != null && mcc.length() < 1) {
      throw new IllegalArgumentException("Invalid value for mcc. Length must be greater than or equal to 1.");
    }
    this.mcc = mcc;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayToolsBlAuthenticationThreeDsBrand instance itself
   */
  public PayToolsBlAuthenticationThreeDsBrand putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayToolsBlAuthenticationThreeDsBrand payToolsBlAuthenticationThreeDsBrand = (PayToolsBlAuthenticationThreeDsBrand) o;
    return Objects.equals(this.brd, payToolsBlAuthenticationThreeDsBrand.brd) &&
        Objects.equals(this.bin, payToolsBlAuthenticationThreeDsBrand.bin) &&
        Objects.equals(this.mid, payToolsBlAuthenticationThreeDsBrand.mid) &&
        Objects.equals(this.mcc, payToolsBlAuthenticationThreeDsBrand.mcc)&&
        Objects.equals(this.additionalProperties, payToolsBlAuthenticationThreeDsBrand.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brd, bin, mid, mcc, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayToolsBlAuthenticationThreeDsBrand {\n");
    sb.append("    brd: ").append(toIndentedString(brd)).append("\n");
    sb.append("    bin: ").append(toIndentedString(bin)).append("\n");
    sb.append("    mid: ").append(toIndentedString(mid)).append("\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brd");
    openapiFields.add("bin");
    openapiFields.add("mid");
    openapiFields.add("mcc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bin");
    openapiRequiredFields.add("mid");
    openapiRequiredFields.add("mcc");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayToolsBlAuthenticationThreeDsBrand
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayToolsBlAuthenticationThreeDsBrand.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayToolsBlAuthenticationThreeDsBrand is not found in the empty JSON string", PayToolsBlAuthenticationThreeDsBrand.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PayToolsBlAuthenticationThreeDsBrand.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("bin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin").toString()));
      }
      if (!jsonObj.get("mid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mid").toString()));
      }
      if (!jsonObj.get("mcc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mcc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mcc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayToolsBlAuthenticationThreeDsBrand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayToolsBlAuthenticationThreeDsBrand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayToolsBlAuthenticationThreeDsBrand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayToolsBlAuthenticationThreeDsBrand.class));

       return (TypeAdapter<T>) new TypeAdapter<PayToolsBlAuthenticationThreeDsBrand>() {
           @Override
           public void write(JsonWriter out, PayToolsBlAuthenticationThreeDsBrand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayToolsBlAuthenticationThreeDsBrand read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayToolsBlAuthenticationThreeDsBrand instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayToolsBlAuthenticationThreeDsBrand given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayToolsBlAuthenticationThreeDsBrand
  * @throws IOException if the JSON string is invalid with respect to PayToolsBlAuthenticationThreeDsBrand
  */
  public static PayToolsBlAuthenticationThreeDsBrand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayToolsBlAuthenticationThreeDsBrand.class);
  }

 /**
  * Convert an instance of PayToolsBlAuthenticationThreeDsBrand to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

