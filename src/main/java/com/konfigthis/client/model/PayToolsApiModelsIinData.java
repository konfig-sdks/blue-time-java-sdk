/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * IIN data
 */
@ApiModel(description = "IIN data")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayToolsApiModelsIinData {
  public static final String SERIALIZED_NAME_BIN = "bin";
  @SerializedName(SERIALIZED_NAME_BIN)
  private String bin;

  public static final String SERIALIZED_NAME_CARD_BRAND = "cardBrand";
  @SerializedName(SERIALIZED_NAME_CARD_BRAND)
  private String cardBrand;

  public static final String SERIALIZED_NAME_CARD_TYPE = "cardType";
  @SerializedName(SERIALIZED_NAME_CARD_TYPE)
  private String cardType;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_ISSUING_ORGANIZATION = "issuingOrganization";
  @SerializedName(SERIALIZED_NAME_ISSUING_ORGANIZATION)
  private String issuingOrganization;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_BRAND_LOGO_URL = "brandLogoUrl";
  @SerializedName(SERIALIZED_NAME_BRAND_LOGO_URL)
  private String brandLogoUrl;

  public PayToolsApiModelsIinData() {
  }

  public PayToolsApiModelsIinData bin(String bin) {
    
    
    
    
    this.bin = bin;
    return this;
  }

   /**
   * The longest match of the first 6 to 11 digits of the card number that we were able to match
   * @return bin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The longest match of the first 6 to 11 digits of the card number that we were able to match")

  public String getBin() {
    return bin;
  }


  public void setBin(String bin) {
    
    
    
    this.bin = bin;
  }


  public PayToolsApiModelsIinData cardBrand(String cardBrand) {
    
    
    
    
    this.cardBrand = cardBrand;
    return this;
  }

   /**
   * The card brand (AMERICAN EXPRESS, VISA, MASTERCARD, JCB etc)
   * @return cardBrand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The card brand (AMERICAN EXPRESS, VISA, MASTERCARD, JCB etc)")

  public String getCardBrand() {
    return cardBrand;
  }


  public void setCardBrand(String cardBrand) {
    
    
    
    this.cardBrand = cardBrand;
  }


  public PayToolsApiModelsIinData cardType(String cardType) {
    
    
    
    
    this.cardType = cardType;
    return this;
  }

   /**
   * The type of card (DEBIT, CREDIT, &#39;DEBIT OR CREDIT&#39;, CHARGE CARD)
   * @return cardType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of card (DEBIT, CREDIT, 'DEBIT OR CREDIT', CHARGE CARD)")

  public String getCardType() {
    return cardType;
  }


  public void setCardType(String cardType) {
    
    
    
    this.cardType = cardType;
  }


  public PayToolsApiModelsIinData category(String category) {
    
    
    
    
    this.category = category;
    return this;
  }

   /**
   * The category of the card (CLASSIC, BUSINESS, STANDARD, PERSONAL, etc)
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The category of the card (CLASSIC, BUSINESS, STANDARD, PERSONAL, etc)")

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    
    
    
    this.category = category;
  }


  public PayToolsApiModelsIinData issuingOrganization(String issuingOrganization) {
    
    
    
    
    this.issuingOrganization = issuingOrganization;
    return this;
  }

   /**
   * The name of the entity (usually bank) that issued the card
   * @return issuingOrganization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the entity (usually bank) that issued the card")

  public String getIssuingOrganization() {
    return issuingOrganization;
  }


  public void setIssuingOrganization(String issuingOrganization) {
    
    
    
    this.issuingOrganization = issuingOrganization;
  }


  public PayToolsApiModelsIinData countryCode(String countryCode) {
    
    
    
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * The 2 letter country code (&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_3166-2#Current_codes\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 3166-2 &lt;img src&#x3D;\&quot;https://files.readme.io/b676144-openNewWindow.png\&quot; width&#x3D;\&quot;10\&quot; /&gt;&lt;/a&gt;) where the card was issued
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The 2 letter country code (<a href=\"https://en.wikipedia.org/wiki/ISO_3166-2#Current_codes\" target=\"_blank\">ISO 3166-2 <img src=\"https://files.readme.io/b676144-openNewWindow.png\" width=\"10\" /></a>) where the card was issued")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    
    this.countryCode = countryCode;
  }


  public PayToolsApiModelsIinData brandLogoUrl(String brandLogoUrl) {
    
    
    
    
    this.brandLogoUrl = brandLogoUrl;
    return this;
  }

   /**
   * The url to the brand logo
   * @return brandLogoUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The url to the brand logo")

  public String getBrandLogoUrl() {
    return brandLogoUrl;
  }


  public void setBrandLogoUrl(String brandLogoUrl) {
    
    
    
    this.brandLogoUrl = brandLogoUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayToolsApiModelsIinData instance itself
   */
  public PayToolsApiModelsIinData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayToolsApiModelsIinData payToolsApiModelsIinData = (PayToolsApiModelsIinData) o;
    return Objects.equals(this.bin, payToolsApiModelsIinData.bin) &&
        Objects.equals(this.cardBrand, payToolsApiModelsIinData.cardBrand) &&
        Objects.equals(this.cardType, payToolsApiModelsIinData.cardType) &&
        Objects.equals(this.category, payToolsApiModelsIinData.category) &&
        Objects.equals(this.issuingOrganization, payToolsApiModelsIinData.issuingOrganization) &&
        Objects.equals(this.countryCode, payToolsApiModelsIinData.countryCode) &&
        Objects.equals(this.brandLogoUrl, payToolsApiModelsIinData.brandLogoUrl)&&
        Objects.equals(this.additionalProperties, payToolsApiModelsIinData.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bin, cardBrand, cardType, category, issuingOrganization, countryCode, brandLogoUrl, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayToolsApiModelsIinData {\n");
    sb.append("    bin: ").append(toIndentedString(bin)).append("\n");
    sb.append("    cardBrand: ").append(toIndentedString(cardBrand)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    issuingOrganization: ").append(toIndentedString(issuingOrganization)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    brandLogoUrl: ").append(toIndentedString(brandLogoUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bin");
    openapiFields.add("cardBrand");
    openapiFields.add("cardType");
    openapiFields.add("category");
    openapiFields.add("issuingOrganization");
    openapiFields.add("countryCode");
    openapiFields.add("brandLogoUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayToolsApiModelsIinData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayToolsApiModelsIinData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayToolsApiModelsIinData is not found in the empty JSON string", PayToolsApiModelsIinData.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("bin").isJsonNull() && (jsonObj.get("bin") != null && !jsonObj.get("bin").isJsonNull()) && !jsonObj.get("bin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin").toString()));
      }
      if (!jsonObj.get("cardBrand").isJsonNull() && (jsonObj.get("cardBrand") != null && !jsonObj.get("cardBrand").isJsonNull()) && !jsonObj.get("cardBrand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardBrand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardBrand").toString()));
      }
      if (!jsonObj.get("cardType").isJsonNull() && (jsonObj.get("cardType") != null && !jsonObj.get("cardType").isJsonNull()) && !jsonObj.get("cardType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardType").toString()));
      }
      if (!jsonObj.get("category").isJsonNull() && (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if (!jsonObj.get("issuingOrganization").isJsonNull() && (jsonObj.get("issuingOrganization") != null && !jsonObj.get("issuingOrganization").isJsonNull()) && !jsonObj.get("issuingOrganization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuingOrganization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuingOrganization").toString()));
      }
      if (!jsonObj.get("countryCode").isJsonNull() && (jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if (!jsonObj.get("brandLogoUrl").isJsonNull() && (jsonObj.get("brandLogoUrl") != null && !jsonObj.get("brandLogoUrl").isJsonNull()) && !jsonObj.get("brandLogoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandLogoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandLogoUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayToolsApiModelsIinData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayToolsApiModelsIinData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayToolsApiModelsIinData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayToolsApiModelsIinData.class));

       return (TypeAdapter<T>) new TypeAdapter<PayToolsApiModelsIinData>() {
           @Override
           public void write(JsonWriter out, PayToolsApiModelsIinData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayToolsApiModelsIinData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayToolsApiModelsIinData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayToolsApiModelsIinData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayToolsApiModelsIinData
  * @throws IOException if the JSON string is invalid with respect to PayToolsApiModelsIinData
  */
  public static PayToolsApiModelsIinData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayToolsApiModelsIinData.class);
  }

 /**
  * Convert an instance of PayToolsApiModelsIinData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

