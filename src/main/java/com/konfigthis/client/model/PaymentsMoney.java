/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PaymentsCurrencyCode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PaymentsMoney
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentsMoney {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private PaymentsCurrencyCode currencyCode;

  public static final String SERIALIZED_NAME_ISO4217_CURRENCY_NUMBER = "iso4217CurrencyNumber";
  @SerializedName(SERIALIZED_NAME_ISO4217_CURRENCY_NUMBER)
  private String iso4217CurrencyNumber;

  public static final String SERIALIZED_NAME_AMOUNT_IN_LARGEST_UNITS = "amountInLargestUnits";
  @SerializedName(SERIALIZED_NAME_AMOUNT_IN_LARGEST_UNITS)
  private Double amountInLargestUnits;

  public static final String SERIALIZED_NAME_FORMATTED_AMOUNT = "formattedAmount";
  @SerializedName(SERIALIZED_NAME_FORMATTED_AMOUNT)
  private String formattedAmount;

  public PaymentsMoney() {
  }

  
  public PaymentsMoney(
     String iso4217CurrencyNumber, 
     Double amountInLargestUnits, 
     String formattedAmount
  ) {
    this();
    this.iso4217CurrencyNumber = iso4217CurrencyNumber;
    this.amountInLargestUnits = amountInLargestUnits;
    this.formattedAmount = formattedAmount;
  }

  public PaymentsMoney amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public PaymentsMoney currencyCode(PaymentsCurrencyCode currencyCode) {
    
    
    
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentsCurrencyCode getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(PaymentsCurrencyCode currencyCode) {
    
    
    
    this.currencyCode = currencyCode;
  }


   /**
   * Get iso4217CurrencyNumber
   * @return iso4217CurrencyNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIso4217CurrencyNumber() {
    return iso4217CurrencyNumber;
  }




   /**
   * Get amountInLargestUnits
   * @return amountInLargestUnits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getAmountInLargestUnits() {
    return amountInLargestUnits;
  }




   /**
   * Get formattedAmount
   * @return formattedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFormattedAmount() {
    return formattedAmount;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentsMoney instance itself
   */
  public PaymentsMoney putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentsMoney paymentsMoney = (PaymentsMoney) o;
    return Objects.equals(this.amount, paymentsMoney.amount) &&
        Objects.equals(this.currencyCode, paymentsMoney.currencyCode) &&
        Objects.equals(this.iso4217CurrencyNumber, paymentsMoney.iso4217CurrencyNumber) &&
        Objects.equals(this.amountInLargestUnits, paymentsMoney.amountInLargestUnits) &&
        Objects.equals(this.formattedAmount, paymentsMoney.formattedAmount)&&
        Objects.equals(this.additionalProperties, paymentsMoney.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currencyCode, iso4217CurrencyNumber, amountInLargestUnits, formattedAmount, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentsMoney {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    iso4217CurrencyNumber: ").append(toIndentedString(iso4217CurrencyNumber)).append("\n");
    sb.append("    amountInLargestUnits: ").append(toIndentedString(amountInLargestUnits)).append("\n");
    sb.append("    formattedAmount: ").append(toIndentedString(formattedAmount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("currencyCode");
    openapiFields.add("iso4217CurrencyNumber");
    openapiFields.add("amountInLargestUnits");
    openapiFields.add("formattedAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentsMoney
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentsMoney.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentsMoney is not found in the empty JSON string", PaymentsMoney.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("iso4217CurrencyNumber").isJsonNull() && (jsonObj.get("iso4217CurrencyNumber") != null && !jsonObj.get("iso4217CurrencyNumber").isJsonNull()) && !jsonObj.get("iso4217CurrencyNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iso4217CurrencyNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iso4217CurrencyNumber").toString()));
      }
      if (!jsonObj.get("formattedAmount").isJsonNull() && (jsonObj.get("formattedAmount") != null && !jsonObj.get("formattedAmount").isJsonNull()) && !jsonObj.get("formattedAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedAmount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentsMoney.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentsMoney' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentsMoney> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentsMoney.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentsMoney>() {
           @Override
           public void write(JsonWriter out, PaymentsMoney value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentsMoney read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentsMoney instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentsMoney given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentsMoney
  * @throws IOException if the JSON string is invalid with respect to PaymentsMoney
  */
  public static PaymentsMoney fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentsMoney.class);
  }

 /**
  * Convert an instance of PaymentsMoney to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

