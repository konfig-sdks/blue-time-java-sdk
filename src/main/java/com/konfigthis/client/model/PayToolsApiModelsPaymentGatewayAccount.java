/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.SystemCollectionsGenericKeyValuePair2SystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798eSystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798e;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The raw credentials necessary to connect to the chosen payment gateway as defined in &#x60;GET /PaymentGateway&#x60;.  **Please note**, if you provide us with both the raw details here and a stored Payment Gateway Account in the &#x60;paymentGatewayAccountName&#x60; parameter, these credentials will take precedence.
 */
@ApiModel(description = "The raw credentials necessary to connect to the chosen payment gateway as defined in `GET /PaymentGateway`.  **Please note**, if you provide us with both the raw details here and a stored Payment Gateway Account in the `paymentGatewayAccountName` parameter, these credentials will take precedence.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayToolsApiModelsPaymentGatewayAccount {
  public static final String SERIALIZED_NAME_PAYMENT_GATEWAY_NAME = "paymentGatewayName";
  @SerializedName(SERIALIZED_NAME_PAYMENT_GATEWAY_NAME)
  private String paymentGatewayName;

  public static final String SERIALIZED_NAME_CREDENTIALS = "credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private List<SystemCollectionsGenericKeyValuePair2SystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798eSystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798e> credentials = null;

  public PayToolsApiModelsPaymentGatewayAccount() {
  }

  public PayToolsApiModelsPaymentGatewayAccount paymentGatewayName(String paymentGatewayName) {
    
    
    
    
    this.paymentGatewayName = paymentGatewayName;
    return this;
  }

   /**
   * Unique name of the Payment Gateway the account information relates to.
   * @return paymentGatewayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique name of the Payment Gateway the account information relates to.")

  public String getPaymentGatewayName() {
    return paymentGatewayName;
  }


  public void setPaymentGatewayName(String paymentGatewayName) {
    
    
    
    this.paymentGatewayName = paymentGatewayName;
  }


  public PayToolsApiModelsPaymentGatewayAccount credentials(List<SystemCollectionsGenericKeyValuePair2SystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798eSystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798e> credentials) {
    
    
    
    
    this.credentials = credentials;
    return this;
  }

  public PayToolsApiModelsPaymentGatewayAccount addCredentialsItem(SystemCollectionsGenericKeyValuePair2SystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798eSystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798e credentialsItem) {
    if (this.credentials == null) {
      this.credentials = new ArrayList<>();
    }
    this.credentials.add(credentialsItem);
    return this;
  }

   /**
   * A list of key-value pairs that represents your credentials within the Payment gateway.   Each key should represent a parameter listed in the \&quot;CredentialsNames\&quot; element of the response from the list all payment gateways method at &#x60;[GET] /paymentGateway&#x60;  Example:  \&quot;Credentials\&quot;: [     {         \&quot;Key\&quot;: \&quot;PrivateKey\&quot;,         \&quot;Value\&quot;: \&quot;VBtt666M/G098098vgdewvk0Mc-GH\&quot;     }  ]
   * @return credentials
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of key-value pairs that represents your credentials within the Payment gateway.   Each key should represent a parameter listed in the \"CredentialsNames\" element of the response from the list all payment gateways method at `[GET] /paymentGateway`  Example:  \"Credentials\": [     {         \"Key\": \"PrivateKey\",         \"Value\": \"VBtt666M/G098098vgdewvk0Mc-GH\"     }  ]")

  public List<SystemCollectionsGenericKeyValuePair2SystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798eSystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798e> getCredentials() {
    return credentials;
  }


  public void setCredentials(List<SystemCollectionsGenericKeyValuePair2SystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798eSystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798e> credentials) {
    
    
    
    this.credentials = credentials;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayToolsApiModelsPaymentGatewayAccount instance itself
   */
  public PayToolsApiModelsPaymentGatewayAccount putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayToolsApiModelsPaymentGatewayAccount payToolsApiModelsPaymentGatewayAccount = (PayToolsApiModelsPaymentGatewayAccount) o;
    return Objects.equals(this.paymentGatewayName, payToolsApiModelsPaymentGatewayAccount.paymentGatewayName) &&
        Objects.equals(this.credentials, payToolsApiModelsPaymentGatewayAccount.credentials)&&
        Objects.equals(this.additionalProperties, payToolsApiModelsPaymentGatewayAccount.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentGatewayName, credentials, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayToolsApiModelsPaymentGatewayAccount {\n");
    sb.append("    paymentGatewayName: ").append(toIndentedString(paymentGatewayName)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paymentGatewayName");
    openapiFields.add("credentials");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayToolsApiModelsPaymentGatewayAccount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayToolsApiModelsPaymentGatewayAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayToolsApiModelsPaymentGatewayAccount is not found in the empty JSON string", PayToolsApiModelsPaymentGatewayAccount.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("paymentGatewayName").isJsonNull() && (jsonObj.get("paymentGatewayName") != null && !jsonObj.get("paymentGatewayName").isJsonNull()) && !jsonObj.get("paymentGatewayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentGatewayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentGatewayName").toString()));
      }
      if (jsonObj.get("credentials") != null && !jsonObj.get("credentials").isJsonNull()) {
        JsonArray jsonArraycredentials = jsonObj.getAsJsonArray("credentials");
        if (jsonArraycredentials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("credentials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `credentials` to be an array in the JSON string but got `%s`", jsonObj.get("credentials").toString()));
          }

          // validate the optional field `credentials` (array)
          for (int i = 0; i < jsonArraycredentials.size(); i++) {
            SystemCollectionsGenericKeyValuePair2SystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798eSystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798e.validateJsonObject(jsonArraycredentials.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayToolsApiModelsPaymentGatewayAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayToolsApiModelsPaymentGatewayAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayToolsApiModelsPaymentGatewayAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayToolsApiModelsPaymentGatewayAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<PayToolsApiModelsPaymentGatewayAccount>() {
           @Override
           public void write(JsonWriter out, PayToolsApiModelsPaymentGatewayAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayToolsApiModelsPaymentGatewayAccount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayToolsApiModelsPaymentGatewayAccount instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayToolsApiModelsPaymentGatewayAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayToolsApiModelsPaymentGatewayAccount
  * @throws IOException if the JSON string is invalid with respect to PayToolsApiModelsPaymentGatewayAccount
  */
  public static PayToolsApiModelsPaymentGatewayAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayToolsApiModelsPaymentGatewayAccount.class);
  }

 /**
  * Convert an instance of PayToolsApiModelsPaymentGatewayAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

