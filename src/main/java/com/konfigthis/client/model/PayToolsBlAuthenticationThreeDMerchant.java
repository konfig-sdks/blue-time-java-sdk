/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PayToolsBlAuthenticationThreeDsBrand;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The 3DS Merchant data to be signed
 */
@ApiModel(description = "The 3DS Merchant data to be signed")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayToolsBlAuthenticationThreeDMerchant {
  public static final String SERIALIZED_NAME_MNM = "mnm";
  @SerializedName(SERIALIZED_NAME_MNM)
  private String mnm;

  public static final String SERIALIZED_NAME_MDS = "mds";
  @SerializedName(SERIALIZED_NAME_MDS)
  private String mds;

  public static final String SERIALIZED_NAME_MSF = "msf";
  @SerializedName(SERIALIZED_NAME_MSF)
  private String msf;

  public static final String SERIALIZED_NAME_CNT = "cnt";
  @SerializedName(SERIALIZED_NAME_CNT)
  private String cnt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_BRDS = "brds";
  @SerializedName(SERIALIZED_NAME_BRDS)
  private List<PayToolsBlAuthenticationThreeDsBrand> brds = new ArrayList<>();

  public PayToolsBlAuthenticationThreeDMerchant() {
  }

  public PayToolsBlAuthenticationThreeDMerchant mnm(String mnm) {
    
    
    if (mnm != null && mnm.length() < 1) {
      throw new IllegalArgumentException("Invalid value for mnm. Length must be greater than or equal to 1.");
    }
    
    this.mnm = mnm;
    return this;
  }

   /**
   * Merchant name
   * @return mnm
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Merchant name")

  public String getMnm() {
    return mnm;
  }


  public void setMnm(String mnm) {
    
    
    if (mnm != null && mnm.length() < 1) {
      throw new IllegalArgumentException("Invalid value for mnm. Length must be greater than or equal to 1.");
    }
    this.mnm = mnm;
  }


  public PayToolsBlAuthenticationThreeDMerchant mds(String mds) {
    
    
    if (mds != null && mds.length() < 1) {
      throw new IllegalArgumentException("Invalid value for mds. Length must be greater than or equal to 1.");
    }
    
    this.mds = mds;
    return this;
  }

   /**
   * Merchant&#39;s display name
   * @return mds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Merchant's display name")

  public String getMds() {
    return mds;
  }


  public void setMds(String mds) {
    
    
    if (mds != null && mds.length() < 1) {
      throw new IllegalArgumentException("Invalid value for mds. Length must be greater than or equal to 1.");
    }
    this.mds = mds;
  }


  public PayToolsBlAuthenticationThreeDMerchant msf(String msf) {
    
    
    if (msf != null && msf.length() < 1) {
      throw new IllegalArgumentException("Invalid value for msf. Length must be greater than or equal to 1.");
    }
    
    this.msf = msf;
    return this;
  }

   /**
   * Merchant&#39;s Requestor Id suffix
   * @return msf
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Merchant's Requestor Id suffix")

  public String getMsf() {
    return msf;
  }


  public void setMsf(String msf) {
    
    
    if (msf != null && msf.length() < 1) {
      throw new IllegalArgumentException("Invalid value for msf. Length must be greater than or equal to 1.");
    }
    this.msf = msf;
  }


  public PayToolsBlAuthenticationThreeDMerchant cnt(String cnt) {
    
    
    if (cnt != null && cnt.length() < 1) {
      throw new IllegalArgumentException("Invalid value for cnt. Length must be greater than or equal to 1.");
    }
    
    this.cnt = cnt;
    return this;
  }

   /**
   * Merchant&#39;s Country (3-digit ISO 3166-1 numeric)
   * @return cnt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Merchant's Country (3-digit ISO 3166-1 numeric)")

  public String getCnt() {
    return cnt;
  }


  public void setCnt(String cnt) {
    
    
    if (cnt != null && cnt.length() < 1) {
      throw new IllegalArgumentException("Invalid value for cnt. Length must be greater than or equal to 1.");
    }
    this.cnt = cnt;
  }


  public PayToolsBlAuthenticationThreeDMerchant url(URI url) {
    
    
    if (url != null && url.length() < 1) {
      throw new IllegalArgumentException("Invalid value for url. Length must be greater than or equal to 1.");
    }
    
    this.url = url;
    return this;
  }

   /**
   * Merchant&#39;s Url
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Merchant's Url")

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    
    
    if (url != null && url.length() < 1) {
      throw new IllegalArgumentException("Invalid value for url. Length must be greater than or equal to 1.");
    }
    this.url = url;
  }


  public PayToolsBlAuthenticationThreeDMerchant brds(List<PayToolsBlAuthenticationThreeDsBrand> brds) {
    
    
    
    
    this.brds = brds;
    return this;
  }

  public PayToolsBlAuthenticationThreeDMerchant addBrdsItem(PayToolsBlAuthenticationThreeDsBrand brdsItem) {
    this.brds.add(brdsItem);
    return this;
  }

   /**
   * List of supported brands
   * @return brds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "List of supported brands")

  public List<PayToolsBlAuthenticationThreeDsBrand> getBrds() {
    return brds;
  }


  public void setBrds(List<PayToolsBlAuthenticationThreeDsBrand> brds) {
    
    
    
    this.brds = brds;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayToolsBlAuthenticationThreeDMerchant instance itself
   */
  public PayToolsBlAuthenticationThreeDMerchant putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayToolsBlAuthenticationThreeDMerchant payToolsBlAuthenticationThreeDMerchant = (PayToolsBlAuthenticationThreeDMerchant) o;
    return Objects.equals(this.mnm, payToolsBlAuthenticationThreeDMerchant.mnm) &&
        Objects.equals(this.mds, payToolsBlAuthenticationThreeDMerchant.mds) &&
        Objects.equals(this.msf, payToolsBlAuthenticationThreeDMerchant.msf) &&
        Objects.equals(this.cnt, payToolsBlAuthenticationThreeDMerchant.cnt) &&
        Objects.equals(this.url, payToolsBlAuthenticationThreeDMerchant.url) &&
        Objects.equals(this.brds, payToolsBlAuthenticationThreeDMerchant.brds)&&
        Objects.equals(this.additionalProperties, payToolsBlAuthenticationThreeDMerchant.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mnm, mds, msf, cnt, url, brds, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayToolsBlAuthenticationThreeDMerchant {\n");
    sb.append("    mnm: ").append(toIndentedString(mnm)).append("\n");
    sb.append("    mds: ").append(toIndentedString(mds)).append("\n");
    sb.append("    msf: ").append(toIndentedString(msf)).append("\n");
    sb.append("    cnt: ").append(toIndentedString(cnt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    brds: ").append(toIndentedString(brds)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mnm");
    openapiFields.add("mds");
    openapiFields.add("msf");
    openapiFields.add("cnt");
    openapiFields.add("url");
    openapiFields.add("brds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mnm");
    openapiRequiredFields.add("mds");
    openapiRequiredFields.add("msf");
    openapiRequiredFields.add("cnt");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("brds");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayToolsBlAuthenticationThreeDMerchant
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayToolsBlAuthenticationThreeDMerchant.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayToolsBlAuthenticationThreeDMerchant is not found in the empty JSON string", PayToolsBlAuthenticationThreeDMerchant.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PayToolsBlAuthenticationThreeDMerchant.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("mnm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mnm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mnm").toString()));
      }
      if (!jsonObj.get("mds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mds").toString()));
      }
      if (!jsonObj.get("msf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msf").toString()));
      }
      if (!jsonObj.get("cnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cnt").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("brds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `brds` to be an array in the JSON string but got `%s`", jsonObj.get("brds").toString()));
      }

      JsonArray jsonArraybrds = jsonObj.getAsJsonArray("brds");
      // validate the required field `brds` (array)
      for (int i = 0; i < jsonArraybrds.size(); i++) {
        PayToolsBlAuthenticationThreeDsBrand.validateJsonObject(jsonArraybrds.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayToolsBlAuthenticationThreeDMerchant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayToolsBlAuthenticationThreeDMerchant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayToolsBlAuthenticationThreeDMerchant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayToolsBlAuthenticationThreeDMerchant.class));

       return (TypeAdapter<T>) new TypeAdapter<PayToolsBlAuthenticationThreeDMerchant>() {
           @Override
           public void write(JsonWriter out, PayToolsBlAuthenticationThreeDMerchant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayToolsBlAuthenticationThreeDMerchant read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayToolsBlAuthenticationThreeDMerchant instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayToolsBlAuthenticationThreeDMerchant given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayToolsBlAuthenticationThreeDMerchant
  * @throws IOException if the JSON string is invalid with respect to PayToolsBlAuthenticationThreeDMerchant
  */
  public static PayToolsBlAuthenticationThreeDMerchant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayToolsBlAuthenticationThreeDMerchant.class);
  }

 /**
  * Convert an instance of PayToolsBlAuthenticationThreeDMerchant to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

