/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.PayToolsApiModelsAuthRequestModel;
import com.konfigthis.client.model.PayToolsApiModelsCaptureVoidRequestModel;
import com.konfigthis.client.model.PayToolsApiModelsCardInputModel;
import com.konfigthis.client.model.PayToolsApiModelsPayerDetails;
import com.konfigthis.client.model.PayToolsApiModelsPaymentGatewayAccount;
import com.konfigthis.client.model.PayToolsApiModelsPaymentGatewayDescriptionModel;
import com.konfigthis.client.model.PayToolsApiModelsRefundRequestModel;
import com.konfigthis.client.model.PaymentsNetworkTokenSchemes;
import com.konfigthis.client.model.PaymentsOperationResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentGatewayApi
 */
@Disabled
public class PaymentGatewayApiTest {

    private static PaymentGatewayApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PaymentGatewayApi(apiClient);
    }

    /**
     * List all payment gateways
     *
     * To provide you with full payment orchestration capabilities, we have integrated with many different payment gateways and processors around the world. This method allows you to retrieve the list of all integrated payment gateways in our system and provide you with the relevant connection settings required for each of them.  To see a graphical list of the supported payment gateways, please visit our website.  If you would like us to support a new payment gateway not on the list, please contact our support.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGatewaysTest() throws ApiException {
        List<PayToolsApiModelsPaymentGatewayDescriptionModel> response = api.listGateways()
                .execute();
        // TODO: test validations
    }

    /**
     * Perform a payment gateway authorize operation
     *
     * This method allows you to perform an \&quot;authorize\&quot; operation (also called \&quot;preauthorization\&quot; or \&quot;authorization\&quot;) through your payment gateway. When you perform the \&quot;authorize\&quot; operation, the bank that issued the credit card will place an authorization of the total amount of the funds. This is how the bank determines if the funds are available to make the purchase. The card will not actually be “charged” until you perform the \&quot;capture\&quot; operation (using our &#x60;[PUT] /PaymentGateway/capture&#x60; method).  **Please note**, different card brands and different banks allow for different time frames on the lifespan of a payment authorization. You will need to check with your payment processor on how long you would have between performing an \&quot;authorize\&quot; operation and a \&quot;charge\&quot; operation\&quot;.  If needed, you can void this \&quot;authorize\&quot; operation by using the &#x60;[DELETE] /PaymentGateway/void&#x60; method
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performAuthorizeOperationTest() throws ApiException {
        String currency = null;
        PayToolsApiModelsCardInputModel card = null;
        Double amount = null;
        Boolean isDigital = null;
        String orderDesc = null;
        PayToolsApiModelsPayerDetails payerDetails = null;
        String myRef = null;
        String paymentGatewayAccountName = null;
        String certificateName = null;
        PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount = null;
        PaymentsNetworkTokenSchemes networkTokenBrand = null;
        PaymentsOperationResult response = api.performAuthorizeOperation(currency, card, amount)
                .isDigital(isDigital)
                .orderDesc(orderDesc)
                .payerDetails(payerDetails)
                .myRef(myRef)
                .paymentGatewayAccountName(paymentGatewayAccountName)
                .certificateName(certificateName)
                .paymentGatewayAccount(paymentGatewayAccount)
                .networkTokenBrand(networkTokenBrand)
                .execute();
        // TODO: test validations
    }

    /**
     * Perform a payment gateway capture operation
     *
     * This method allows you to perform a \&quot;capture\&quot; operation on a previously created \&quot;authorize\&quot; operation (see our &#x60;[POST] /PaymentGateway/authorize&#x60; method for additional information).  When you perform the \&quot;authorize\&quot; operation, the bank that issued the credit card will place an authorization of the total amount of the funds. This is how the bank determines if the funds are available to make the purchase. The card will not actually be “charged” until you perform the \&quot;capture\&quot; operation.  **Please note**, different card brands and different banks allow for different time frames on the lifespan of a payment authorization. You will need to check with your payment processor on how long you would have between performing an \&quot;authorize\&quot; operation and a \&quot;charge\&quot; operation\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performCaptureOperationTest() throws ApiException {
        String currency = null;
        String refTransId = null;
        PayToolsApiModelsCardInputModel card = null;
        Double amount = null;
        String myRef = null;
        String paymentGatewayAccountName = null;
        String certificateName = null;
        PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount = null;
        PaymentsNetworkTokenSchemes networkTokenBrand = null;
        PaymentsOperationResult response = api.performCaptureOperation(currency, refTransId, card, amount)
                .myRef(myRef)
                .paymentGatewayAccountName(paymentGatewayAccountName)
                .certificateName(certificateName)
                .paymentGatewayAccount(paymentGatewayAccount)
                .networkTokenBrand(networkTokenBrand)
                .execute();
        // TODO: test validations
    }

    /**
     * Perform a payment gateway charge operation
     *
     * This method allows you to perform a \&quot;charge\&quot; operation through your payment gateway. A \&quot;charge\&quot; operation will request immediate payment from the card and the card owner will see this listed as a transaction in their card statement.  If needed, you can void this \&quot;charge\&quot; operation by using the &#x60;[DELETE] /PaymentGateway/void&#x60; method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performChargeOperationTest() throws ApiException {
        String currency = null;
        PayToolsApiModelsCardInputModel card = null;
        Double amount = null;
        Boolean isDigital = null;
        String orderDesc = null;
        PayToolsApiModelsPayerDetails payerDetails = null;
        String myRef = null;
        String paymentGatewayAccountName = null;
        String certificateName = null;
        PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount = null;
        PaymentsNetworkTokenSchemes networkTokenBrand = null;
        PaymentsOperationResult response = api.performChargeOperation(currency, card, amount)
                .isDigital(isDigital)
                .orderDesc(orderDesc)
                .payerDetails(payerDetails)
                .myRef(myRef)
                .paymentGatewayAccountName(paymentGatewayAccountName)
                .certificateName(certificateName)
                .paymentGatewayAccount(paymentGatewayAccount)
                .networkTokenBrand(networkTokenBrand)
                .execute();
        // TODO: test validations
    }

    /**
     * Perform a payment gateway refund operation
     *
     * This method allows you to submit a \&quot;refund\&quot; operation against a previously created \&quot;charge\&quot; (using &#x60;[POST] /PaymentGateway/charge&#x60;) or \&quot;capture\&quot; (using &#x60;[POST] /PaymentGateway/capture&#x60;) operations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performRefundOperationTest() throws ApiException {
        String currency = null;
        String refTransId = null;
        PayToolsApiModelsCardInputModel card = null;
        Double amount = null;
        PayToolsApiModelsPayerDetails payerDetails = null;
        String myRef = null;
        String paymentGatewayAccountName = null;
        String certificateName = null;
        PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount = null;
        PaymentsNetworkTokenSchemes networkTokenBrand = null;
        PaymentsOperationResult response = api.performRefundOperation(currency, refTransId, card, amount)
                .payerDetails(payerDetails)
                .myRef(myRef)
                .paymentGatewayAccountName(paymentGatewayAccountName)
                .certificateName(certificateName)
                .paymentGatewayAccount(paymentGatewayAccount)
                .networkTokenBrand(networkTokenBrand)
                .execute();
        // TODO: test validations
    }

    /**
     * Perform a payment gateway Void operation
     *
     * This method allows you to submit a \&quot;void\&quot; operation against a previously created \&quot;charge\&quot; (using &#x60;[POST] /PaymentGateway/charge&#x60;) or \&quot;authorize\&quot; (using &#x60;[POST] /PaymentGateway/authorize&#x60;) operations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void voidOperationTest() throws ApiException {
        String currency = null;
        String refTransId = null;
        PayToolsApiModelsCardInputModel card = null;
        Double amount = null;
        String myRef = null;
        String paymentGatewayAccountName = null;
        String certificateName = null;
        PayToolsApiModelsPaymentGatewayAccount paymentGatewayAccount = null;
        PaymentsNetworkTokenSchemes networkTokenBrand = null;
        PaymentsOperationResult response = api.voidOperation(currency, refTransId, card, amount)
                .myRef(myRef)
                .paymentGatewayAccountName(paymentGatewayAccountName)
                .certificateName(certificateName)
                .paymentGatewayAccount(paymentGatewayAccount)
                .networkTokenBrand(networkTokenBrand)
                .execute();
        // TODO: test validations
    }

}
