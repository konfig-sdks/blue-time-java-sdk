/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.PayToolsApiModelsBrandLookupResult;
import com.konfigthis.client.model.PayToolsApiModelsCardValidationResults;
import com.konfigthis.client.model.PayToolsApiModelsIinData;
import com.konfigthis.client.model.PayToolsApiModelsLuhnCheckResultsWithIinData;
import com.konfigthis.client.model.PayToolsApiModelsPayerBaseWithClientIp;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ToolsApi
 */
@Disabled
public class ToolsApiTest {

    private static ToolsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ToolsApi(apiClient);
    }

    /**
     * Brand Lookup
     *
     * This method allows you to lookup the brand of the card provided.               By providing the card&#39;s BIN / IIN (the first 6 to 11 digits of the card number), we lookup and return the brand of the card (Visa, Mastercard, Amex, etc.).              In addition, we will also provide the URL to the logo of the card brand - you can then reference this image in your card capture form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBrandLookupTest() throws ApiException {
        String iin = null;
        PayToolsApiModelsBrandLookupResult response = api.getBrandLookup(iin)
                .execute();
        // TODO: test validations
    }

    /**
     * Metadata Lookup
     *
     * This method allows you to lookup the metadata of the card provided.   By providing the card&#39;s BIN / IIN (the first 6 to 11 digits of the card number), we lookup and return the full metadata available for this card./r/nI  In addition, we will also provide the URL to the logo of the card brand - you can then reference this image in your card capture form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lookupMetadataTest() throws ApiException {
        String iin = null;
        PayToolsApiModelsIinData response = api.lookupMetadata(iin)
                .execute();
        // TODO: test validations
    }

    /**
     * Card Validation
     *
     * This method allows you to validate the card details against the card&#39;s meta data. By providing the billing address and IP address of the card owner, we validate those against the metadata of the card and provide a risk assessment for this transaction.  All you would need is the card&#39;s BIN / IIN (the first 6 to 11 digits of the card number), the billing address and IP address.  The response of this method will include the full metadata information for this BIN including the risk assessment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateCardDetailsTest() throws ApiException {
        String clientIPAddress = null;
        String countryCode = null;
        String iin = null;
        String city = null;
        String stateProvince = null;
        PayToolsApiModelsCardValidationResults response = api.validateCardDetails(clientIPAddress, countryCode, iin)
                .city(city)
                .stateProvince(stateProvince)
                .execute();
        // TODO: test validations
    }

    /**
     * Luhn Algorithm Validation
     *
     * This method allows you to provide the card number and validate it against the&lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Luhn_algorithm\&quot; target&#x3D;\&quot;_blank\&quot;&gt; Luhn algorithm&lt;/a&gt;.In addition, you can choose to receive the card&#39;s metadata in the response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateLuhnCardTest() throws ApiException {
        String number = null;
        Boolean metaData = null;
        PayToolsApiModelsLuhnCheckResultsWithIinData response = api.validateLuhnCard(number)
                .metaData(metaData)
                .execute();
        // TODO: test validations
    }

}
