/*
 * Orchestra API
 * Code Version 1.0.7.15
 *
 * The version of the OpenAPI document: Prod
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.PayToolsApiModelsJwsOutputModel;
import com.konfigthis.client.model.PayToolsBlAuthenticationThreeDsSessionModel;
import com.konfigthis.client.model.PayToolsSharedModelsMoneyModel;
import com.konfigthis.client.model.PayToolsSharedModelsThreeDsClientMessage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ThreeDsSessionsApi
 */
@Disabled
public class ThreeDsSessionsApiTest {

    private static ThreeDsSessionsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ThreeDsSessionsApi(apiClient);
    }

    /**
     * Get challenge ststus, as stored on server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChallengeStatusTest() throws ApiException {
        PayToolsSharedModelsThreeDsClientMessage response = api.getChallengeStatus()
                .execute();
        // TODO: test validations
    }

    /**
     * Get a token to start a card operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokenStartOperationTest() throws ApiException {
        String merchantAccountName = null;
        PayToolsSharedModelsMoneyModel amt = null;
        Integer ttl = null;
        PayToolsApiModelsJwsOutputModel response = api.getTokenStartOperation(merchantAccountName, amt, ttl)
                .execute();
        // TODO: test validations
    }

    /**
     * Handle a callback (redirect from device fingerprint)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void handleFingerprintCallbackTest() throws ApiException {
        String sessionId = null;
        api.handleFingerprintCallback(sessionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Handle a callback (redirect from challenge)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void handleMpiChallengeCallbackTest() throws ApiException {
        String sessionId = null;
        api.handleMpiChallengeCallback(sessionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Perform validation of the operation using to signed data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performValidationOperationTest() throws ApiException {
        api.performValidationOperation()
                .execute();
        // TODO: test validations
    }

}
